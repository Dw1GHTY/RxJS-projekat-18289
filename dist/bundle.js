(()=>{"use strict";var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};function t(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return a.label++,{value:c[1],done:!1};case 5:a.label++,r=c[1],c=[0];continue;case 7:c=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){a=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){a.label=c[1];break}if(6===c[0]&&a.label<o[1]){a.label=o[1],o=c;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(c);break}o[2]&&a.ops.pop(),a.trys.pop();continue}c=t.call(e,a)}catch(e){c=[6,e],r=0}finally{n=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}}function r(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function i(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}function a(e){return this instanceof a?(this.v=e,this):new a(e)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var c=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function u(e){return"function"==typeof e}function s(e){return u(null==e?void 0:e.then)}var l,d=((l=function(e){var t;t=this,Error.call(t),t.stack=(new Error).stack,this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}).prototype=Object.create(Error.prototype),l.prototype.constructor=l,l);function f(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var p=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var t;return e.prototype.unsubscribe=function(){var e,t,n,a,c;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var l=r(s),f=l.next();!f.done;f=l.next())f.value.remove(this)}catch(t){e={error:t}}finally{try{f&&!f.done&&(t=l.return)&&t.call(l)}finally{if(e)throw e.error}}else s.remove(this);var p=this.initialTeardown;if(u(p))try{p()}catch(e){c=e instanceof d?e.errors:[e]}var h=this._finalizers;if(h){this._finalizers=null;try{for(var y=r(h),m=y.next();!m.done;m=y.next()){var b=m.value;try{v(b)}catch(e){c=null!=c?c:[],e instanceof d?c=i(i([],o(c)),o(e.errors)):c.push(e)}}}catch(e){n={error:e}}finally{try{m&&!m.done&&(a=y.return)&&a.call(y)}finally{if(n)throw n.error}}}if(c)throw new d(c)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)v(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&f(t,e)},e.prototype.remove=function(t){var n=this._finalizers;n&&f(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}();function h(e){return e instanceof p||e&&"closed"in e&&u(e.remove)&&u(e.add)&&u(e.unsubscribe)}function v(e){u(e)?e():e.unsubscribe()}p.EMPTY;var y={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},m={setTimeout:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var a=m.delegate;return(null==a?void 0:a.setTimeout)?a.setTimeout.apply(a,i([e,t],o(n))):setTimeout.apply(void 0,i([e,t],o(n)))},clearTimeout:function(e){var t=m.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function b(e){m.setTimeout((function(){var t=y.onUnhandledError;if(!t)throw e;t(e)}))}function w(){}var E=L("C",void 0,void 0);function L(e,t,n){return{kind:e,value:t,error:n}}var x=null,C=function(e){function n(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,h(t)&&t.add(n)):n.destination=P,n}return t(n,e),n.create=function(e,t,n){return new T(e,t,n)},n.prototype.next=function(e){this.isStopped?A(function(e){return L("N",e,void 0)}(e),this):this._next(e)},n.prototype.error=function(e){this.isStopped?A(L("E",void 0,e),this):(this.isStopped=!0,this._error(e))},n.prototype.complete=function(){this.isStopped?A(E,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(e){this.destination.next(e)},n.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(p),g=Function.prototype.bind;function _(e,t){return g.call(e,t)}var S=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){I(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){I(e)}else I(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){I(e)}},e}(),T=function(e){function n(t,n,r){var o,i,a=e.call(this)||this;return u(t)||!t?o={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:a&&y.useDeprecatedNextContext?((i=Object.create(t)).unsubscribe=function(){return a.unsubscribe()},o={next:t.next&&_(t.next,i),error:t.error&&_(t.error,i),complete:t.complete&&_(t.complete,i)}):o=t,a.destination=new S(o),a}return t(n,e),n}(C);function I(e){var t;y.useDeprecatedSynchronousErrorHandling?(t=e,y.useDeprecatedSynchronousErrorHandling&&x&&(x.errorThrown=!0,x.error=t)):b(e)}function A(e,t){var n=y.onStoppedNotification;n&&m.setTimeout((function(){return n(e,t)}))}var P={closed:!0,next:w,error:function(e){throw e},complete:w},O="function"==typeof Symbol&&Symbol.observable||"@@observable";function M(e){return e}var H=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r,o=this,i=(r=e)&&r instanceof C||function(e){return e&&u(e.next)&&u(e.error)&&u(e.complete)}(r)&&h(r)?e:new T(e,t,n);return function(e){if(y.useDeprecatedSynchronousErrorHandling){var t=!x;if(t&&(x={errorThrown:!1,error:null}),e(),t){var n=x,r=n.errorThrown,o=n.error;if(x=null,r)throw o}}else e()}((function(){var e=o,t=e.operator,n=e.source;i.add(t?t.call(i,n):n?o._subscribe(i):o._trySubscribe(i))})),i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=D(t))((function(t,r){var o=new T({next:function(t){try{e(t)}catch(e){r(e),o.unsubscribe()}},error:r,complete:t});n.subscribe(o)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[O]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===(n=e).length?M:1===n.length?n[0]:function(e){return n.reduce((function(e,t){return t(e)}),e)})(this);var n},e.prototype.toPromise=function(e){var t=this;return new(e=D(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function D(e){var t;return null!==(t=null!=e?e:y.Promise)&&void 0!==t?t:Promise}function k(e){return u(e[O])}function j(e){return Symbol.asyncIterator&&u(null==e?void 0:e[Symbol.asyncIterator])}function R(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var U="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function N(e){return u(null==e?void 0:e[U])}function z(e){return function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||u(e,t)}))})}function u(e,t){try{(n=o[e](t)).value instanceof a?Promise.resolve(n.value.v).then(s,l):d(i[0][2],n)}catch(e){d(i[0][3],e)}var n}function s(e){u("next",e)}function l(e){u("throw",e)}function d(e,t){e(t),i.shift(),i.length&&u(i[0][0],i[0][1])}}(this,arguments,(function(){var t,r,o;return n(this,(function(n){switch(n.label){case 0:t=e.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,a(t.read())];case 3:return r=n.sent(),o=r.value,r.done?[4,a(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,a(o)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function B(e){return u(null==e?void 0:e.getReader)}function Y(e){if(e instanceof H)return e;if(null!=e){if(k(e))return i=e,new H((function(e){var t=i[O]();if(u(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(c(e))return o=e,new H((function(e){for(var t=0;t<o.length&&!e.closed;t++)e.next(o[t]);e.complete()}));if(s(e))return n=e,new H((function(e){n.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,b)}));if(j(e))return F(e);if(N(e))return t=e,new H((function(e){var n,o;try{for(var i=r(t),a=i.next();!a.done;a=i.next()){var c=a.value;if(e.next(c),e.closed)return}}catch(e){n={error:e}}finally{try{a&&!a.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}e.complete()}));if(B(e))return F(z(e))}var t,n,o,i;throw R(e)}function F(e){return new H((function(t){(function(e,t){var o,i,a,c,u,s,l,d;return u=this,s=void 0,d=function(){var u,s;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),o=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=r(e),t={},o("next"),o("throw"),o("return"),t[Symbol.asyncIterator]=function(){return this},t);function o(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}(e),n.label=1;case 1:return[4,o.next()];case 2:if((i=n.sent()).done)return[3,4];if(u=i.value,t.next(u),t.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=n.sent(),a={error:s},[3,11];case 6:return n.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(a)throw a.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(e,t){function n(e){try{o(d.next(e))}catch(e){t(e)}}function r(e){try{o(d.throw(e))}catch(e){t(e)}}function o(t){var o;t.done?e(t.value):(o=t.value,o instanceof l?o:new l((function(e){e(o)}))).then(n,r)}o((d=d.apply(u,s||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}function q(e){return function(t){if(function(e){return u(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function G(e,t,n,r,o){return new K(e,t,n,r,o)}var K=function(e){function n(t,n,r,o,i,a){var c=e.call(this,t)||this;return c.onFinalize=i,c.shouldUnsubscribe=a,c._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,c._error=o?function(e){try{o(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,c._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,c}return t(n,e),n.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},n}(C);function Q(e,t){return q((function(n,r){var o=0;n.subscribe(G(r,(function(n){r.next(e.call(t,n,o++))})))}))}function W(e,t,n){return void 0===n&&(n=1/0),u(t)?W((function(n,r){return Q((function(e,o){return t(n,e,r,o)}))(Y(e(n,r)))}),n):("number"==typeof t&&(n=t),q((function(t,r){return function(e,t,n,r,o,i,a,c){var u=[],s=0,l=0,d=!1,f=function(){!d||u.length||s||t.complete()},p=function(e){return s<r?h(e):u.push(e)},h=function(e){s++;var o=!1;Y(n(e,l++)).subscribe(G(t,(function(e){t.next(e)}),(function(){o=!0}),void 0,(function(){if(o)try{s--;for(;u.length&&s<r;)e=void 0,e=u.shift(),h(e);f()}catch(e){t.error(e)}var e})))};return e.subscribe(G(t,p,(function(){d=!0,f()}))),function(){}}(t,r,e,n)})))}var J=Array.isArray;var V=["addListener","removeListener"],X=["addEventListener","removeEventListener"],Z=["on","off"];function $(e,t,n,r){if(u(n)&&(r=n,n=void 0),r)return $(e,t,n).pipe((a=r,Q((function(e){return function(e,t){return J(t)?e.apply(void 0,i([],o(t))):e(t)}(a,e)}))));var a,s=o(function(e){return u(e.addEventListener)&&u(e.removeEventListener)}(e)?X.map((function(r){return function(o){return e[r](t,o,n)}})):function(e){return u(e.addListener)&&u(e.removeListener)}(e)?V.map(ee(e,t)):function(e){return u(e.on)&&u(e.off)}(e)?Z.map(ee(e,t)):[],2),l=s[0],d=s[1];if(!l&&c(e))return W((function(e){return $(e,t,n)}))(Y(e));if(!l)throw new TypeError("Invalid event target");return new H((function(e){var t=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1<t.length?t:t[0])};return l(t),function(){return d(t)}}))}function ee(e,t){return function(n){return function(r){return e[n](t,r)}}}var te=function(e){function n(t,n){return e.call(this)||this}return t(n,e),n.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},n}(p),ne={setInterval:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var a=ne.delegate;return(null==a?void 0:a.setInterval)?a.setInterval.apply(a,i([e,t],o(n))):setInterval.apply(void 0,i([e,t],o(n)))},clearInterval:function(e){var t=ne.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(e)},delegate:void 0},re=function(e){function n(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r.pending=!1,r}return t(n,e),n.prototype.schedule=function(e,t){var n;if(void 0===t&&(t=0),this.closed)return this;this.state=e;var r=this.id,o=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(o,r,t)),this.pending=!0,this.delay=t,this.id=null!==(n=this.id)&&void 0!==n?n:this.requestAsyncId(o,this.id,t),this},n.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),ne.setInterval(e.flush.bind(e,this),n)},n.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return t;null!=t&&ne.clearInterval(t)},n.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(e,t);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(e,t){var n,r=!1;try{this.work(e)}catch(e){r=!0,n=e||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},n.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,f(r,this),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},n}(te),oe={now:function(){return(oe.delegate||Date).now()},delegate:void 0},ie=function(){function e(t,n){void 0===n&&(n=e.now),this.schedulerActionCtor=t,this.now=n}return e.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(n,t)},e.now=oe.now,e}(),ae=new(function(e){function n(t,n){void 0===n&&(n=ie.now);var r=e.call(this,t,n)||this;return r.actions=[],r._active=!1,r}return t(n,e),n.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var n;this._active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},n}(ie))(re);var ce={DB_URL:"http://localhost:3000/components/",API_KEY:"9ebc9b0fcdf393a8952f4c7dc03c0a0509785232"};function ue(e){var t=e;t.toLowerCase();var n=fetch(ce.DB_URL).then((function(e){if(e.ok)return e.json();throw new Error("Components not found")})).then((function(e){return e.filter((function(e){return e.item.toLowerCase().includes(t)}))})).catch((function(e){return console.log(e),[]}));return console.log(n),Y(n)}function se(e){var t=document.createElement("div");t.classList.add("shop-container"),e.appendChild(t);var n=document.createElement("div");n.classList.add("shop-title-container"),t.appendChild(n);var r=document.createElement("h2");return r.classList.add("shop-title"),r.innerHTML="INTERNATIONAL SHOP",n.appendChild(r),function(e){var t=document.createElement("div");t.classList.add("search-container"),e.appendChild(t);var n,r,o,i=document.createElement("input");i.classList.add("search-bar"),i.placeholder="Search items...",t.appendChild(i),$(i,"input").pipe((void 0===o&&(o=ae),q((function(e,t){var n=null,r=null,i=null,a=function(){if(n){n.unsubscribe(),n=null;var e=r;r=null,t.next(e)}};function c(){var e=i+1e3,r=o.now();if(r<e)return n=this.schedule(void 0,e-r),void t.add(n);a()}e.subscribe(G(t,(function(e){r=e,i=o.now(),n||(n=o.schedule(c,1e3),t.add(n))}),(function(){a(),t.complete()}),void 0,(function(){r=n=null})))}))),Q((function(e){return e.target.value})),(r=function(e){return e.length>=2},q((function(e,t){var n=0;e.subscribe(G(t,(function(e){return r.call(void 0,e,n++)&&t.next(e)})))}))),(n=function(e){return ue(e)},q((function(e,t){var r=null,o=!1,i=function(){return o&&!r&&t.complete()};e.subscribe(G(t,(function(e){null==r||r.unsubscribe(),Y(n(e)).subscribe(r=G(t,(function(e){return t.next(e)}),(function(){r=null,i()})))}),(function(){o=!0,i()})))})))).subscribe((function(e){return console.log("search db: ",e)}))}(t),function(e){var t=document.createElement("table");t.classList.add("shop-table"),e.appendChild(t);var n=document.createElement("thead");t.appendChild(n);var r=document.createElement("tr");n.appendChild(r);var o=document.createElement("th");o.classList.add(".table-item"),o.innerHTML="Item",r.appendChild(o);var i=document.createElement("th");i.classList.add("table-price"),i.innerHTML="Price RSD",r.appendChild(i);var a=document.createElement("th");a.classList.add("table-manufacturer"),a.innerHTML="Manufacturer",r.appendChild(a);var c=document.createElement("tbody");c.classList.add("shop-table-body"),t.appendChild(c),function(e){ue("").subscribe((function(t){t.slice(0,15).forEach((function(t){var n=document.createElement("tr"),r=document.createElement("td");r.textContent=t.item,n.appendChild(r);var o=document.createElement("td");o.textContent=t.priceRSD.toPrecision(),n.appendChild(o);var i=document.createElement("td");i.textContent=t.manufacturer,n.appendChild(i),e.appendChild(n)}))}))}(c)}(t),t}!function(){var e=document.createElement("div");e.classList.add("app-container"),document.body.appendChild(e),function(e){var t=document.createElement("div");t.classList.add("header-container"),e.appendChild(t);var n=document.createElement("div");n.classList.add("logo-container"),t.appendChild(n);var r=document.createElement("h1");r.classList.add("app-logo"),r.textContent="LOGO",n.appendChild(r);var o=document.createElement("div");o.classList.add("app-title-container"),t.appendChild(o);var i=document.createElement("h1");i.classList.add("app-title"),i.innerHTML="TITLE",o.appendChild(i)}(e);var t=document.createElement("div");t.classList.add("workspace-container"),e.appendChild(t);var n=function(e){var t=document.createElement("div");t.classList.add("wallet-container"),e.appendChild(t);var n=document.createElement("div");n.classList.add("wallet-title-container"),t.appendChild(n);var r=document.createElement("h2");r.classList.add("wallet-title"),r.innerHTML="WALLET",n.appendChild(r),function(e){var t=document.createElement("div");t.classList.add("balance-container"),e.appendChild(t);var n=document.createElement("h3");n.classList.add("balance-title"),n.innerHTML="Balance: ",t.appendChild(n);var r=document.createElement("div");r.classList.add("balance"),r.innerHTML="60000",t.appendChild(r)}(t),function(e){var t=document.createElement("div");t.classList.add("deposit-container"),e.appendChild(t);var n=document.createElement("input");n.classList.add("deposit-input"),n.placeholder="Enter deposit amount",t.appendChild(n);var r=document.createElement("button");r.classList.add("wallet-button"),r.innerHTML="Deposit",t.appendChild(r)}(t),function(e){var t=document.createElement("div");t.classList.add("convert-container"),e.appendChild(t);var n=document.createElement("h3");n.classList.add("convert-title"),n.innerHTML="Convert: ",t.appendChild(n);var r=document.createElement("div");r.classList.add("to-euro-container"),t.appendChild(r);var o=document.createElement("input");o.classList.add("to-euro-amount"),o.placeholder="Amount (RSD)",r.appendChild(o);var i=document.createElement("button");i.classList.add("wallet-button"),i.innerHTML="Convert to EUR",r.appendChild(i);var a=document.createElement("div");a.classList.add("to-dollar-container"),t.appendChild(a);var c=document.createElement("input");c.classList.add("to-dollar-amount"),c.placeholder="Amount (RSD)",a.appendChild(c);var u=document.createElement("button");u.classList.add("wallet-button"),u.innerHTML="Convert to USD",a.appendChild(u)}(t),function(e){var t=document.createElement("div");t.classList.add("rates-container"),e.appendChild(t);var n=document.createElement("div");n.classList.add("balance-eur"),t.appendChild(n),n.innerText="Balance in EUR: ";var r=document.createElement("div");r.classList.add("balance-usd"),t.appendChild(r),r.innerText="Balance in USD: "}(t);var o=document.createElement("div");o.classList.add("conversion-info-container"),t.appendChild(o);var i=document.createElement("a");return i.classList.add("conversion-info-link"),i.innerHTML="i: conversions are done via live exchange rates",i.href="https://www.msn.com/en-xl/money/portfolio?tab=Related&id=avsaec&ocid=ansMSNMoney11&duration=1D&src=b_rscrsl&relatedQuoteId=avsaec&relatedSource=MlAl",o.appendChild(i),t}(t);t.appendChild(n);var r=se(t);t.appendChild(r)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Y0FBYyxLQU1sRCxPQUxBcUUsRUFBbUJwRSxVQUFVck8sSUFBSSx3QkFDakN5UyxFQUFtQmhFLFVBQVksa0RBQy9CZ0UsRUFBbUJDLEtBQU8sdUpBQzFCRixFQUF3QmxFLFlBQVltRSxHQUU3QjFCLENBQ1gsQ0Z4Qm1CNEIsQ0FBb0IxRSxHQUNuQ0EsRUFBbUJLLFlBQVl3QyxHQUUvQixJQUFNOEIsRUFBTzVFLEdBQWtCQyxHQUMvQkEsRUFBbUJLLFlBQVlzRSxFQUduQyxDT1pBQyxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWthdC0xODI4OS8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYubWpzIiwid2VicGFjazovL3J4anMtcHJvamVrYXQtMTgyODkvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0FycmF5TGlrZS5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2pla2F0LTE4Mjg5Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2pla2F0LTE4Mjg5Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNQcm9taXNlLmpzIiwid2VicGFjazovL3J4anMtcHJvamVrYXQtMTgyODkvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yLmpzIiwid2VicGFjazovL3J4anMtcHJvamVrYXQtMTgyODkvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9jcmVhdGVFcnJvckNsYXNzLmpzIiwid2VicGFjazovL3J4anMtcHJvamVrYXQtMTgyODkvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9hcnJSZW1vdmUuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWthdC0xODI4OS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWthdC0xODI4OS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9jb25maWcuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWthdC0xODI4OS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyLmpzIiwid2VicGFjazovL3J4anMtcHJvamVrYXQtMTgyODkvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvci5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2pla2F0LTE4Mjg5Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbm9vcC5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2pla2F0LTE4Mjg5Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL05vdGlmaWNhdGlvbkZhY3Rvcmllcy5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2pla2F0LTE4Mjg5Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvZXJyb3JDb250ZXh0LmpzIiwid2VicGFjazovL3J4anMtcHJvamVrYXQtMTgyODkvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2pla2F0LTE4Mjg5Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3N5bWJvbC9vYnNlcnZhYmxlLmpzIiwid2VicGFjazovL3J4anMtcHJvamVrYXQtMTgyODkvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2pla2F0LTE4Mjg5Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL09ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWthdC0xODI4OS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3BpcGUuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWthdC0xODI4OS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWthdC0xODI4OS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzQXN5bmNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2pla2F0LTE4Mjg5Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvci5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2pla2F0LTE4Mjg5Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2pla2F0LTE4Mjg5Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2pla2F0LTE4Mjg5Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWthdC0xODI4OS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2lubmVyRnJvbS5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2pla2F0LTE4Mjg5Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbGlmdC5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2pla2F0LTE4Mjg5Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9PcGVyYXRvclN1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWthdC0xODI4OS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwLmpzIiwid2VicGFjazovL3J4anMtcHJvamVrYXQtMTgyODkvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlTWFwLmpzIiwid2VicGFjazovL3J4anMtcHJvamVrYXQtMTgyODkvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlSW50ZXJuYWxzLmpzIiwid2VicGFjazovL3J4anMtcHJvamVrYXQtMTgyODkvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9tYXBPbmVPck1hbnlBcmdzLmpzIiwid2VicGFjazovL3J4anMtcHJvamVrYXQtMTgyODkvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tRXZlbnQuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWthdC0xODI4OS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQWN0aW9uLmpzIiwid2VicGFjazovL3J4anMtcHJvamVrYXQtMTgyODkvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2ludGVydmFsUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWthdC0xODI4OS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQXN5bmNBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWthdC0xODI4OS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLmpzIiwid2VicGFjazovL3J4anMtcHJvamVrYXQtMTgyODkvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU2NoZWR1bGVyLmpzIiwid2VicGFjazovL3J4anMtcHJvamVrYXQtMTgyODkvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2FzeW5jLmpzIiwid2VicGFjazovL3J4anMtcHJvamVrYXQtMTgyODkvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FzeW5jU2NoZWR1bGVyLmpzIiwid2VicGFjazovL3J4anMtcHJvamVrYXQtMTgyODkvLi9zcmMvZW52aXJvbWVudHMudHMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWthdC0xODI4OS8uL3NyYy9mdW5jdGlvbnMvZ2V0Q29tcG9uZW50cy50cyIsIndlYnBhY2s6Ly9yeGpzLXByb2pla2F0LTE4Mjg5Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvZnJvbS5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2pla2F0LTE4Mjg5Ly4vc3JjL3ZpZXdzL3Nob3Avc2hvcC50cyIsIndlYnBhY2s6Ly9yeGpzLXByb2pla2F0LTE4Mjg5Ly4vc3JjL3ZpZXdzL3Nob3Avc2VhcmNoL3NlYXJjaC50cyIsIndlYnBhY2s6Ly9yeGpzLXByb2pla2F0LTE4Mjg5Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9zd2l0Y2hNYXAuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWthdC0xODI4OS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZmlsdGVyLmpzIiwid2VicGFjazovL3J4anMtcHJvamVrYXQtMTgyODkvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2RlYm91bmNlVGltZS5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2pla2F0LTE4Mjg5Ly4vc3JjL3ZpZXdzL3Nob3Avc2VhcmNoL3NlYXJjaEZ1bmN0aW9ucy50cyIsIndlYnBhY2s6Ly9yeGpzLXByb2pla2F0LTE4Mjg5Ly4vc3JjL3ZpZXdzL3Nob3AvdGFibGUvdGFibGUudHMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWthdC0xODI4OS8uL3NyYy92aWV3cy9zaG9wL3RhYmxlL3RhYmxlRnVuY3Rpb25zLnRzIiwid2VicGFjazovL3J4anMtcHJvamVrYXQtMTgyODkvLi9zcmMvdmlld3MvbWFpbi50cyIsIndlYnBhY2s6Ly9yeGpzLXByb2pla2F0LTE4Mjg5Ly4vc3JjL3ZpZXdzL2hlYWRlci9oZWFkZXIudHMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWthdC0xODI4OS8uL3NyYy92aWV3cy93YWxsZXQvd2FsbGV0LnRzIiwid2VicGFjazovL3J4anMtcHJvamVrYXQtMTgyODkvLi9zcmMvdmlld3Mvd2FsbGV0L2JhbGFuY2UvYmFsYW5jZS50cyIsIndlYnBhY2s6Ly9yeGpzLXByb2pla2F0LTE4Mjg5Ly4vc3JjL3ZpZXdzL3dhbGxldC9kZXBvc2l0L2RlcG9zaXQudHMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWthdC0xODI4OS8uL3NyYy92aWV3cy93YWxsZXQvY29udmVydC9jb252ZXJ0LnRzIiwid2VicGFjazovL3J4anMtcHJvamVrYXQtMTgyODkvLi9zcmMvdmlld3Mvd2FsbGV0L3JhdGVzL3JhdGVzLnRzIiwid2VicGFjazovL3J4anMtcHJvamVrYXQtMTgyODkvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlLCBTdXBwcmVzc2VkRXJyb3IsIFN5bWJvbCAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxyXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XHJcbiAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0O1xyXG4gIH1cclxuICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgdmFyIHQgPSB7fTtcclxuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgdFtwXSA9IHNbcF07XHJcbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgIH1cclxuICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXNEZWNvcmF0ZShjdG9yLCBkZXNjcmlwdG9ySW4sIGRlY29yYXRvcnMsIGNvbnRleHRJbiwgaW5pdGlhbGl6ZXJzLCBleHRyYUluaXRpYWxpemVycykge1xyXG4gIGZ1bmN0aW9uIGFjY2VwdChmKSB7IGlmIChmICE9PSB2b2lkIDAgJiYgdHlwZW9mIGYgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZ1bmN0aW9uIGV4cGVjdGVkXCIpOyByZXR1cm4gZjsgfVxyXG4gIHZhciBraW5kID0gY29udGV4dEluLmtpbmQsIGtleSA9IGtpbmQgPT09IFwiZ2V0dGVyXCIgPyBcImdldFwiIDoga2luZCA9PT0gXCJzZXR0ZXJcIiA/IFwic2V0XCIgOiBcInZhbHVlXCI7XHJcbiAgdmFyIHRhcmdldCA9ICFkZXNjcmlwdG9ySW4gJiYgY3RvciA/IGNvbnRleHRJbltcInN0YXRpY1wiXSA/IGN0b3IgOiBjdG9yLnByb3RvdHlwZSA6IG51bGw7XHJcbiAgdmFyIGRlc2NyaXB0b3IgPSBkZXNjcmlwdG9ySW4gfHwgKHRhcmdldCA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBjb250ZXh0SW4ubmFtZSkgOiB7fSk7XHJcbiAgdmFyIF8sIGRvbmUgPSBmYWxzZTtcclxuICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICB2YXIgY29udGV4dCA9IHt9O1xyXG4gICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbikgY29udGV4dFtwXSA9IHAgPT09IFwiYWNjZXNzXCIgPyB7fSA6IGNvbnRleHRJbltwXTtcclxuICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4uYWNjZXNzKSBjb250ZXh0LmFjY2Vzc1twXSA9IGNvbnRleHRJbi5hY2Nlc3NbcF07XHJcbiAgICAgIGNvbnRleHQuYWRkSW5pdGlhbGl6ZXIgPSBmdW5jdGlvbiAoZikgeyBpZiAoZG9uZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBhZGQgaW5pdGlhbGl6ZXJzIGFmdGVyIGRlY29yYXRpb24gaGFzIGNvbXBsZXRlZFwiKTsgZXh0cmFJbml0aWFsaXplcnMucHVzaChhY2NlcHQoZiB8fCBudWxsKSk7IH07XHJcbiAgICAgIHZhciByZXN1bHQgPSAoMCwgZGVjb3JhdG9yc1tpXSkoa2luZCA9PT0gXCJhY2Nlc3NvclwiID8geyBnZXQ6IGRlc2NyaXB0b3IuZ2V0LCBzZXQ6IGRlc2NyaXB0b3Iuc2V0IH0gOiBkZXNjcmlwdG9yW2tleV0sIGNvbnRleHQpO1xyXG4gICAgICBpZiAoa2luZCA9PT0gXCJhY2Nlc3NvclwiKSB7XHJcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIGNvbnRpbnVlO1xyXG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCB8fCB0eXBlb2YgcmVzdWx0ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGV4cGVjdGVkXCIpO1xyXG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmdldCkpIGRlc2NyaXB0b3IuZ2V0ID0gXztcclxuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5zZXQpKSBkZXNjcmlwdG9yLnNldCA9IF87XHJcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuaW5pdCkpIGluaXRpYWxpemVycy51bnNoaWZ0KF8pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKF8gPSBhY2NlcHQocmVzdWx0KSkge1xyXG4gICAgICAgICAgaWYgKGtpbmQgPT09IFwiZmllbGRcIikgaW5pdGlhbGl6ZXJzLnVuc2hpZnQoXyk7XHJcbiAgICAgICAgICBlbHNlIGRlc2NyaXB0b3Jba2V5XSA9IF87XHJcbiAgICAgIH1cclxuICB9XHJcbiAgaWYgKHRhcmdldCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgY29udGV4dEluLm5hbWUsIGRlc2NyaXB0b3IpO1xyXG4gIGRvbmUgPSB0cnVlO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcnVuSW5pdGlhbGl6ZXJzKHRoaXNBcmcsIGluaXRpYWxpemVycywgdmFsdWUpIHtcclxuICB2YXIgdXNlVmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGluaXRpYWxpemVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YWx1ZSA9IHVzZVZhbHVlID8gaW5pdGlhbGl6ZXJzW2ldLmNhbGwodGhpc0FyZywgdmFsdWUpIDogaW5pdGlhbGl6ZXJzW2ldLmNhbGwodGhpc0FyZyk7XHJcbiAgfVxyXG4gIHJldHVybiB1c2VWYWx1ZSA/IHZhbHVlIDogdm9pZCAwO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcHJvcEtleSh4KSB7XHJcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSBcInN5bWJvbFwiID8geCA6IFwiXCIuY29uY2F0KHgpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc2V0RnVuY3Rpb25OYW1lKGYsIG5hbWUsIHByZWZpeCkge1xyXG4gIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzeW1ib2xcIikgbmFtZSA9IG5hbWUuZGVzY3JpcHRpb24gPyBcIltcIi5jb25jYXQobmFtZS5kZXNjcmlwdGlvbiwgXCJdXCIpIDogXCJcIjtcclxuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGYsIFwibmFtZVwiLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHByZWZpeCA/IFwiXCIuY29uY2F0KHByZWZpeCwgXCIgXCIsIG5hbWUpIDogbmFtZSB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XHJcbiAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xyXG4gIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XHJcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XHJcbiAgfVxyXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XHJcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICB9XHJcbiAgfTtcclxuICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICBpZiAoIW0pIHJldHVybiBvO1xyXG4gIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gIHRyeSB7XHJcbiAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gIH1cclxuICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICBmaW5hbGx5IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICB9XHJcbiAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gIH1cclxuICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gIHJldHVybiByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSwgcGFjaykge1xyXG4gIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcclxuICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XHJcbiAgICAgICAgICBhcltpXSA9IGZyb21baV07XHJcbiAgICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICB2YXIgaSwgcDtcclxuICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IGZhbHNlIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XHJcbn0pIDogZnVuY3Rpb24obywgdikge1xyXG4gIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICB2YXIgcmVzdWx0ID0ge307XHJcbiAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xyXG4gIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XHJcbiAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xyXG4gIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcclxuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XHJcbiAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRJbihzdGF0ZSwgcmVjZWl2ZXIpIHtcclxuICBpZiAocmVjZWl2ZXIgPT09IG51bGwgfHwgKHR5cGVvZiByZWNlaXZlciAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVjZWl2ZXIgIT09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlICdpbicgb3BlcmF0b3Igb24gbm9uLW9iamVjdFwiKTtcclxuICByZXR1cm4gdHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciA9PT0gc3RhdGUgOiBzdGF0ZS5oYXMocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hZGREaXNwb3NhYmxlUmVzb3VyY2UoZW52LCB2YWx1ZSwgYXN5bmMpIHtcclxuICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHZvaWQgMCkge1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZC5cIik7XHJcbiAgICB2YXIgZGlzcG9zZTtcclxuICAgIGlmIChhc3luYykge1xyXG4gICAgICAgIGlmICghU3ltYm9sLmFzeW5jRGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0Rpc3Bvc2UgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgICAgIGRpc3Bvc2UgPSB2YWx1ZVtTeW1ib2wuYXN5bmNEaXNwb3NlXTtcclxuICAgIH1cclxuICAgIGlmIChkaXNwb3NlID09PSB2b2lkIDApIHtcclxuICAgICAgICBpZiAoIVN5bWJvbC5kaXNwb3NlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmRpc3Bvc2UgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgICAgIGRpc3Bvc2UgPSB2YWx1ZVtTeW1ib2wuZGlzcG9zZV07XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGRpc3Bvc2UgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBub3QgZGlzcG9zYWJsZS5cIik7XHJcbiAgICBlbnYuc3RhY2sucHVzaCh7IHZhbHVlOiB2YWx1ZSwgZGlzcG9zZTogZGlzcG9zZSwgYXN5bmM6IGFzeW5jIH0pO1xyXG4gIH1cclxuICBlbHNlIGlmIChhc3luYykge1xyXG4gICAgZW52LnN0YWNrLnB1c2goeyBhc3luYzogdHJ1ZSB9KTtcclxuICB9XHJcbiAgcmV0dXJuIHZhbHVlO1xyXG59XHJcblxyXG52YXIgX1N1cHByZXNzZWRFcnJvciA9IHR5cGVvZiBTdXBwcmVzc2VkRXJyb3IgPT09IFwiZnVuY3Rpb25cIiA/IFN1cHByZXNzZWRFcnJvciA6IGZ1bmN0aW9uIChlcnJvciwgc3VwcHJlc3NlZCwgbWVzc2FnZSkge1xyXG4gIHZhciBlID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xyXG4gIHJldHVybiBlLm5hbWUgPSBcIlN1cHByZXNzZWRFcnJvclwiLCBlLmVycm9yID0gZXJyb3IsIGUuc3VwcHJlc3NlZCA9IHN1cHByZXNzZWQsIGU7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kaXNwb3NlUmVzb3VyY2VzKGVudikge1xyXG4gIGZ1bmN0aW9uIGZhaWwoZSkge1xyXG4gICAgZW52LmVycm9yID0gZW52Lmhhc0Vycm9yID8gbmV3IF9TdXBwcmVzc2VkRXJyb3IoZSwgZW52LmVycm9yLCBcIkFuIGVycm9yIHdhcyBzdXBwcmVzc2VkIGR1cmluZyBkaXNwb3NhbC5cIikgOiBlO1xyXG4gICAgZW52Lmhhc0Vycm9yID0gdHJ1ZTtcclxuICB9XHJcbiAgZnVuY3Rpb24gbmV4dCgpIHtcclxuICAgIHdoaWxlIChlbnYuc3RhY2subGVuZ3RoKSB7XHJcbiAgICAgIHZhciByZWMgPSBlbnYuc3RhY2sucG9wKCk7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlYy5kaXNwb3NlICYmIHJlYy5kaXNwb3NlLmNhbGwocmVjLnZhbHVlKTtcclxuICAgICAgICBpZiAocmVjLmFzeW5jKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCkudGhlbihuZXh0LCBmdW5jdGlvbihlKSB7IGZhaWwoZSk7IHJldHVybiBuZXh0KCk7IH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICBmYWlsKGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoZW52Lmhhc0Vycm9yKSB0aHJvdyBlbnYuZXJyb3I7XHJcbiAgfVxyXG4gIHJldHVybiBuZXh0KCk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBfX2V4dGVuZHMsXHJcbiAgX19hc3NpZ24sXHJcbiAgX19yZXN0LFxyXG4gIF9fZGVjb3JhdGUsXHJcbiAgX19wYXJhbSxcclxuICBfX21ldGFkYXRhLFxyXG4gIF9fYXdhaXRlcixcclxuICBfX2dlbmVyYXRvcixcclxuICBfX2NyZWF0ZUJpbmRpbmcsXHJcbiAgX19leHBvcnRTdGFyLFxyXG4gIF9fdmFsdWVzLFxyXG4gIF9fcmVhZCxcclxuICBfX3NwcmVhZCxcclxuICBfX3NwcmVhZEFycmF5cyxcclxuICBfX3NwcmVhZEFycmF5LFxyXG4gIF9fYXdhaXQsXHJcbiAgX19hc3luY0dlbmVyYXRvcixcclxuICBfX2FzeW5jRGVsZWdhdG9yLFxyXG4gIF9fYXN5bmNWYWx1ZXMsXHJcbiAgX19tYWtlVGVtcGxhdGVPYmplY3QsXHJcbiAgX19pbXBvcnRTdGFyLFxyXG4gIF9faW1wb3J0RGVmYXVsdCxcclxuICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0LFxyXG4gIF9fY2xhc3NQcml2YXRlRmllbGRTZXQsXHJcbiAgX19jbGFzc1ByaXZhdGVGaWVsZEluLFxyXG4gIF9fYWRkRGlzcG9zYWJsZVJlc291cmNlLFxyXG4gIF9fZGlzcG9zZVJlc291cmNlcyxcclxufTtcclxuIiwiZXhwb3J0IHZhciBpc0FycmF5TGlrZSA9IChmdW5jdGlvbiAoeCkgeyByZXR1cm4geCAmJiB0eXBlb2YgeC5sZW5ndGggPT09ICdudW1iZXInICYmIHR5cGVvZiB4ICE9PSAnZnVuY3Rpb24nOyB9KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheUxpa2UuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcclxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNGdW5jdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSBcIi4vaXNGdW5jdGlvblwiO1xyXG5leHBvcnQgZnVuY3Rpb24gaXNQcm9taXNlKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gaXNGdW5jdGlvbih2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWUudGhlbik7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNQcm9taXNlLmpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZUVycm9yQ2xhc3MgfSBmcm9tICcuL2NyZWF0ZUVycm9yQ2xhc3MnO1xyXG5leHBvcnQgdmFyIFVuc3Vic2NyaXB0aW9uRXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbChlcnJvcnMpIHtcclxuICAgICAgICBfc3VwZXIodGhpcyk7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZXJyb3JzXHJcbiAgICAgICAgICAgID8gZXJyb3JzLmxlbmd0aCArIFwiIGVycm9ycyBvY2N1cnJlZCBkdXJpbmcgdW5zdWJzY3JpcHRpb246XFxuXCIgKyBlcnJvcnMubWFwKGZ1bmN0aW9uIChlcnIsIGkpIHsgcmV0dXJuIGkgKyAxICsgXCIpIFwiICsgZXJyLnRvU3RyaW5nKCk7IH0pLmpvaW4oJ1xcbiAgJylcclxuICAgICAgICAgICAgOiAnJztcclxuICAgICAgICB0aGlzLm5hbWUgPSAnVW5zdWJzY3JpcHRpb25FcnJvcic7XHJcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XHJcbiAgICB9O1xyXG59KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VW5zdWJzY3JpcHRpb25FcnJvci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlRXJyb3JDbGFzcyhjcmVhdGVJbXBsKSB7XHJcbiAgICB2YXIgX3N1cGVyID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgRXJyb3IuY2FsbChpbnN0YW5jZSk7XHJcbiAgICAgICAgaW5zdGFuY2Uuc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcclxuICAgIH07XHJcbiAgICB2YXIgY3RvckZ1bmMgPSBjcmVhdGVJbXBsKF9zdXBlcik7XHJcbiAgICBjdG9yRnVuYy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XHJcbiAgICBjdG9yRnVuYy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yRnVuYztcclxuICAgIHJldHVybiBjdG9yRnVuYztcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVFcnJvckNsYXNzLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBhcnJSZW1vdmUoYXJyLCBpdGVtKSB7XHJcbiAgICBpZiAoYXJyKSB7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XHJcbiAgICAgICAgMCA8PSBpbmRleCAmJiBhcnIuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJSZW1vdmUuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5LCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xyXG5pbXBvcnQgeyBVbnN1YnNjcmlwdGlvbkVycm9yIH0gZnJvbSAnLi91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xyXG5pbXBvcnQgeyBhcnJSZW1vdmUgfSBmcm9tICcuL3V0aWwvYXJyUmVtb3ZlJztcclxudmFyIFN1YnNjcmlwdGlvbiA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oaW5pdGlhbFRlYXJkb3duKSB7XHJcbiAgICAgICAgdGhpcy5pbml0aWFsVGVhcmRvd24gPSBpbml0aWFsVGVhcmRvd247XHJcbiAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX2ZpbmFsaXplcnMgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZV8xLCBfYSwgZV8yLCBfYjtcclxuICAgICAgICB2YXIgZXJyb3JzO1xyXG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcclxuICAgICAgICAgICAgaWYgKF9wYXJlbnRhZ2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9wYXJlbnRhZ2VfMSA9IF9fdmFsdWVzKF9wYXJlbnRhZ2UpLCBfcGFyZW50YWdlXzFfMSA9IF9wYXJlbnRhZ2VfMS5uZXh0KCk7ICFfcGFyZW50YWdlXzFfMS5kb25lOyBfcGFyZW50YWdlXzFfMSA9IF9wYXJlbnRhZ2VfMS5uZXh0KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnRfMSA9IF9wYXJlbnRhZ2VfMV8xLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50XzEucmVtb3ZlKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XHJcbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3BhcmVudGFnZV8xXzEgJiYgIV9wYXJlbnRhZ2VfMV8xLmRvbmUgJiYgKF9hID0gX3BhcmVudGFnZV8xLnJldHVybikpIF9hLmNhbGwoX3BhcmVudGFnZV8xKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3BhcmVudGFnZS5yZW1vdmUodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGluaXRpYWxGaW5hbGl6ZXIgPSB0aGlzLmluaXRpYWxUZWFyZG93bjtcclxuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oaW5pdGlhbEZpbmFsaXplcikpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbEZpbmFsaXplcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvciA/IGUuZXJyb3JzIDogW2VdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBfZmluYWxpemVycyA9IHRoaXMuX2ZpbmFsaXplcnM7XHJcbiAgICAgICAgICAgIGlmIChfZmluYWxpemVycykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmluYWxpemVycyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9maW5hbGl6ZXJzXzEgPSBfX3ZhbHVlcyhfZmluYWxpemVycyksIF9maW5hbGl6ZXJzXzFfMSA9IF9maW5hbGl6ZXJzXzEubmV4dCgpOyAhX2ZpbmFsaXplcnNfMV8xLmRvbmU7IF9maW5hbGl6ZXJzXzFfMSA9IF9maW5hbGl6ZXJzXzEubmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaW5hbGl6ZXIgPSBfZmluYWxpemVyc18xXzEudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjRmluYWxpemVyKGZpbmFsaXplcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzICE9PSBudWxsICYmIGVycm9ycyAhPT0gdm9pZCAwID8gZXJyb3JzIDogW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGVycm9ycykpLCBfX3JlYWQoZXJyLmVycm9ycykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzJfMSkgeyBlXzIgPSB7IGVycm9yOiBlXzJfMSB9OyB9XHJcbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2ZpbmFsaXplcnNfMV8xICYmICFfZmluYWxpemVyc18xXzEuZG9uZSAmJiAoX2IgPSBfZmluYWxpemVyc18xLnJldHVybikpIF9iLmNhbGwoX2ZpbmFsaXplcnNfMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7IH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZXJyb3JzKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5zdWJzY3JpcHRpb25FcnJvcihlcnJvcnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGlmICh0ZWFyZG93biAmJiB0ZWFyZG93biAhPT0gdGhpcykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcclxuICAgICAgICAgICAgICAgIGV4ZWNGaW5hbGl6ZXIodGVhcmRvd24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlYXJkb3duLmNsb3NlZCB8fCB0ZWFyZG93bi5faGFzUGFyZW50KHRoaXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGVhcmRvd24uX2FkZFBhcmVudCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICh0aGlzLl9maW5hbGl6ZXJzID0gKF9hID0gdGhpcy5fZmluYWxpemVycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW10pLnB1c2godGVhcmRvd24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX2hhc1BhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcclxuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcclxuICAgICAgICByZXR1cm4gX3BhcmVudGFnZSA9PT0gcGFyZW50IHx8IChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpICYmIF9wYXJlbnRhZ2UuaW5jbHVkZXMocGFyZW50KSk7XHJcbiAgICB9O1xyXG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5fYWRkUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xyXG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xyXG4gICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkgPyAoX3BhcmVudGFnZS5wdXNoKHBhcmVudCksIF9wYXJlbnRhZ2UpIDogX3BhcmVudGFnZSA/IFtfcGFyZW50YWdlLCBwYXJlbnRdIDogcGFyZW50O1xyXG4gICAgfTtcclxuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX3JlbW92ZVBhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcclxuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcclxuICAgICAgICBpZiAoX3BhcmVudGFnZSA9PT0gcGFyZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcclxuICAgICAgICAgICAgYXJyUmVtb3ZlKF9wYXJlbnRhZ2UsIHBhcmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XHJcbiAgICAgICAgdmFyIF9maW5hbGl6ZXJzID0gdGhpcy5fZmluYWxpemVycztcclxuICAgICAgICBfZmluYWxpemVycyAmJiBhcnJSZW1vdmUoX2ZpbmFsaXplcnMsIHRlYXJkb3duKTtcclxuICAgICAgICBpZiAodGVhcmRvd24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgdGVhcmRvd24uX3JlbW92ZVBhcmVudCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgU3Vic2NyaXB0aW9uLkVNUFRZID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZW1wdHkgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XHJcbiAgICAgICAgZW1wdHkuY2xvc2VkID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gZW1wdHk7XHJcbiAgICB9KSgpO1xyXG4gICAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcclxufSgpKTtcclxuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIH07XHJcbmV4cG9ydCB2YXIgRU1QVFlfU1VCU0NSSVBUSU9OID0gU3Vic2NyaXB0aW9uLkVNUFRZO1xyXG5leHBvcnQgZnVuY3Rpb24gaXNTdWJzY3JpcHRpb24odmFsdWUpIHtcclxuICAgIHJldHVybiAodmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24gfHxcclxuICAgICAgICAodmFsdWUgJiYgJ2Nsb3NlZCcgaW4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5yZW1vdmUpICYmIGlzRnVuY3Rpb24odmFsdWUuYWRkKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnVuc3Vic2NyaWJlKSkpO1xyXG59XHJcbmZ1bmN0aW9uIGV4ZWNGaW5hbGl6ZXIoZmluYWxpemVyKSB7XHJcbiAgICBpZiAoaXNGdW5jdGlvbihmaW5hbGl6ZXIpKSB7XHJcbiAgICAgICAgZmluYWxpemVyKCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBmaW5hbGl6ZXIudW5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpcHRpb24uanMubWFwIiwiZXhwb3J0IHZhciBjb25maWcgPSB7XHJcbiAgICBvblVuaGFuZGxlZEVycm9yOiBudWxsLFxyXG4gICAgb25TdG9wcGVkTm90aWZpY2F0aW9uOiBudWxsLFxyXG4gICAgUHJvbWlzZTogdW5kZWZpbmVkLFxyXG4gICAgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZzogZmFsc2UsXHJcbiAgICB1c2VEZXByZWNhdGVkTmV4dENvbnRleHQ6IGZhbHNlLFxyXG59O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XHJcbmV4cG9ydCB2YXIgdGltZW91dFByb3ZpZGVyID0ge1xyXG4gICAgc2V0VGltZW91dDogZnVuY3Rpb24gKGhhbmRsZXIsIHRpbWVvdXQpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IHRpbWVvdXRQcm92aWRlci5kZWxlZ2F0ZTtcclxuICAgICAgICBpZiAoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLnNldFRpbWVvdXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlLnNldFRpbWVvdXQuYXBwbHkoZGVsZWdhdGUsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XHJcbiAgICB9LFxyXG4gICAgY2xlYXJUaW1lb3V0OiBmdW5jdGlvbiAoaGFuZGxlKSB7XHJcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gdGltZW91dFByb3ZpZGVyLmRlbGVnYXRlO1xyXG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5jbGVhclRpbWVvdXQpIHx8IGNsZWFyVGltZW91dCkoaGFuZGxlKTtcclxuICAgIH0sXHJcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxyXG59O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lb3V0UHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcclxuaW1wb3J0IHsgdGltZW91dFByb3ZpZGVyIH0gZnJvbSAnLi4vc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlcic7XHJcbmV4cG9ydCBmdW5jdGlvbiByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnIpIHtcclxuICAgIHRpbWVvdXRQcm92aWRlci5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgb25VbmhhbmRsZWRFcnJvciA9IGNvbmZpZy5vblVuaGFuZGxlZEVycm9yO1xyXG4gICAgICAgIGlmIChvblVuaGFuZGxlZEVycm9yKSB7XHJcbiAgICAgICAgICAgIG9uVW5oYW5kbGVkRXJyb3IoZXJyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IGVycjtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXBvcnRVbmhhbmRsZWRFcnJvci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gbm9vcCgpIHsgfVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub29wLmpzLm1hcCIsImV4cG9ydCB2YXIgQ09NUExFVEVfTk9USUZJQ0FUSU9OID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignQycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTsgfSkoKTtcclxuZXhwb3J0IGZ1bmN0aW9uIGVycm9yTm90aWZpY2F0aW9uKGVycm9yKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdFJywgdW5kZWZpbmVkLCBlcnJvcik7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIG5leHROb3RpZmljYXRpb24odmFsdWUpIHtcclxuICAgIHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ04nLCB2YWx1ZSwgdW5kZWZpbmVkKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTm90aWZpY2F0aW9uKGtpbmQsIHZhbHVlLCBlcnJvcikge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBraW5kOiBraW5kLFxyXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcclxuICAgICAgICBlcnJvcjogZXJyb3IsXHJcbiAgICB9O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vdGlmaWNhdGlvbkZhY3Rvcmllcy5qcy5tYXAiLCJpbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xyXG52YXIgY29udGV4dCA9IG51bGw7XHJcbmV4cG9ydCBmdW5jdGlvbiBlcnJvckNvbnRleHQoY2IpIHtcclxuICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xyXG4gICAgICAgIHZhciBpc1Jvb3QgPSAhY29udGV4dDtcclxuICAgICAgICBpZiAoaXNSb290KSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQgPSB7IGVycm9yVGhyb3duOiBmYWxzZSwgZXJyb3I6IG51bGwgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2IoKTtcclxuICAgICAgICBpZiAoaXNSb290KSB7XHJcbiAgICAgICAgICAgIHZhciBfYSA9IGNvbnRleHQsIGVycm9yVGhyb3duID0gX2EuZXJyb3JUaHJvd24sIGVycm9yID0gX2EuZXJyb3I7XHJcbiAgICAgICAgICAgIGNvbnRleHQgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoZXJyb3JUaHJvd24pIHtcclxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY2IoKTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgZnVuY3Rpb24gY2FwdHVyZUVycm9yKGVycikge1xyXG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nICYmIGNvbnRleHQpIHtcclxuICAgICAgICBjb250ZXh0LmVycm9yVGhyb3duID0gdHJ1ZTtcclxuICAgICAgICBjb250ZXh0LmVycm9yID0gZXJyO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yQ29udGV4dC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcclxuaW1wb3J0IHsgaXNTdWJzY3JpcHRpb24sIFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcclxuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xyXG5pbXBvcnQgeyByZXBvcnRVbmhhbmRsZWRFcnJvciB9IGZyb20gJy4vdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvcic7XHJcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuL3V0aWwvbm9vcCc7XHJcbmltcG9ydCB7IG5leHROb3RpZmljYXRpb24sIGVycm9yTm90aWZpY2F0aW9uLCBDT01QTEVURV9OT1RJRklDQVRJT04gfSBmcm9tICcuL05vdGlmaWNhdGlvbkZhY3Rvcmllcyc7XHJcbmltcG9ydCB7IHRpbWVvdXRQcm92aWRlciB9IGZyb20gJy4vc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlcic7XHJcbmltcG9ydCB7IGNhcHR1cmVFcnJvciB9IGZyb20gJy4vdXRpbC9lcnJvckNvbnRleHQnO1xyXG52YXIgU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoU3Vic2NyaWJlciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xyXG4gICAgICAgIGlmIChkZXN0aW5hdGlvbikge1xyXG4gICAgICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xyXG4gICAgICAgICAgICBpZiAoaXNTdWJzY3JpcHRpb24oZGVzdGluYXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5hZGQoX3RoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IEVNUFRZX09CU0VSVkVSO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBTdWJzY3JpYmVyLmNyZWF0ZSA9IGZ1bmN0aW9uIChuZXh0LCBlcnJvciwgY29tcGxldGUpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFNhZmVTdWJzY3JpYmVyKG5leHQsIGVycm9yLCBjb21wbGV0ZSk7XHJcbiAgICB9O1xyXG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xyXG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKG5leHROb3RpZmljYXRpb24odmFsdWUpLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX25leHQodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcclxuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihlcnJvck5vdGlmaWNhdGlvbihlcnIpLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5fZXJyb3IoZXJyKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XHJcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oQ09NUExFVEVfTk9USUZJQ0FUSU9OLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5fY29tcGxldGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUudW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcclxuICAgIH07XHJcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gU3Vic2NyaWJlcjtcclxufShTdWJzY3JpcHRpb24pKTtcclxuZXhwb3J0IHsgU3Vic2NyaWJlciB9O1xyXG52YXIgX2JpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZDtcclxuZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xyXG4gICAgcmV0dXJuIF9iaW5kLmNhbGwoZm4sIHRoaXNBcmcpO1xyXG59XHJcbnZhciBDb25zdW1lck9ic2VydmVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENvbnN1bWVyT2JzZXJ2ZXIocGFydGlhbE9ic2VydmVyKSB7XHJcbiAgICAgICAgdGhpcy5wYXJ0aWFsT2JzZXJ2ZXIgPSBwYXJ0aWFsT2JzZXJ2ZXI7XHJcbiAgICB9XHJcbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlciA9IHRoaXMucGFydGlhbE9ic2VydmVyO1xyXG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIubmV4dCkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLm5leHQodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcclxuICAgICAgICBpZiAocGFydGlhbE9ic2VydmVyLmVycm9yKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIuZXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlciA9IHRoaXMucGFydGlhbE9ic2VydmVyO1xyXG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIuY29tcGxldGUpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBDb25zdW1lck9ic2VydmVyO1xyXG59KCkpO1xyXG52YXIgU2FmZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFNhZmVTdWJzY3JpYmVyLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gU2FmZVN1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlcjtcclxuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYnNlcnZlck9yTmV4dCkgfHwgIW9ic2VydmVyT3JOZXh0KSB7XHJcbiAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IHtcclxuICAgICAgICAgICAgICAgIG5leHQ6IChvYnNlcnZlck9yTmV4dCAhPT0gbnVsbCAmJiBvYnNlcnZlck9yTmV4dCAhPT0gdm9pZCAwID8gb2JzZXJ2ZXJPck5leHQgOiB1bmRlZmluZWQpLFxyXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yICE9PSBudWxsICYmIGVycm9yICE9PSB2b2lkIDAgPyBlcnJvciA6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZSAhPT0gbnVsbCAmJiBjb21wbGV0ZSAhPT0gdm9pZCAwID8gY29tcGxldGUgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgY29udGV4dF8xO1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMgJiYgY29uZmlnLnVzZURlcHJlY2F0ZWROZXh0Q29udGV4dCkge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dF8xID0gT2JqZWN0LmNyZWF0ZShvYnNlcnZlck9yTmV4dCk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy51bnN1YnNjcmliZSgpOyB9O1xyXG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHQ6IG9ic2VydmVyT3JOZXh0Lm5leHQgJiYgYmluZChvYnNlcnZlck9yTmV4dC5uZXh0LCBjb250ZXh0XzEpLFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBvYnNlcnZlck9yTmV4dC5lcnJvciAmJiBiaW5kKG9ic2VydmVyT3JOZXh0LmVycm9yLCBjb250ZXh0XzEpLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBvYnNlcnZlck9yTmV4dC5jb21wbGV0ZSAmJiBiaW5kKG9ic2VydmVyT3JOZXh0LmNvbXBsZXRlLCBjb250ZXh0XzEpLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IG9ic2VydmVyT3JOZXh0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gbmV3IENvbnN1bWVyT2JzZXJ2ZXIocGFydGlhbE9ic2VydmVyKTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gU2FmZVN1YnNjcmliZXI7XHJcbn0oU3Vic2NyaWJlcikpO1xyXG5leHBvcnQgeyBTYWZlU3Vic2NyaWJlciB9O1xyXG5mdW5jdGlvbiBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcikge1xyXG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XHJcbiAgICAgICAgY2FwdHVyZUVycm9yKGVycm9yKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJlcG9ydFVuaGFuZGxlZEVycm9yKGVycm9yKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBkZWZhdWx0RXJyb3JIYW5kbGVyKGVycikge1xyXG4gICAgdGhyb3cgZXJyO1xyXG59XHJcbmZ1bmN0aW9uIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKSB7XHJcbiAgICB2YXIgb25TdG9wcGVkTm90aWZpY2F0aW9uID0gY29uZmlnLm9uU3RvcHBlZE5vdGlmaWNhdGlvbjtcclxuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiAmJiB0aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBvblN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKTsgfSk7XHJcbn1cclxuZXhwb3J0IHZhciBFTVBUWV9PQlNFUlZFUiA9IHtcclxuICAgIGNsb3NlZDogdHJ1ZSxcclxuICAgIG5leHQ6IG5vb3AsXHJcbiAgICBlcnJvcjogZGVmYXVsdEVycm9ySGFuZGxlcixcclxuICAgIGNvbXBsZXRlOiBub29wLFxyXG59O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpYmVyLmpzLm1hcCIsImV4cG9ydCB2YXIgb2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7IHJldHVybiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wub2JzZXJ2YWJsZSkgfHwgJ0BAb2JzZXJ2YWJsZSc7IH0pKCk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmFibGUuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcclxuICAgIHJldHVybiB4O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlkZW50aXR5LmpzLm1hcCIsImltcG9ydCB7IFNhZmVTdWJzY3JpYmVyLCBTdWJzY3JpYmVyIH0gZnJvbSAnLi9TdWJzY3JpYmVyJztcclxuaW1wb3J0IHsgaXNTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XHJcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuL3N5bWJvbC9vYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgcGlwZUZyb21BcnJheSB9IGZyb20gJy4vdXRpbC9waXBlJztcclxuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xyXG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xyXG5pbXBvcnQgeyBlcnJvckNvbnRleHQgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcclxudmFyIE9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmUpIHtcclxuICAgICAgICBpZiAoc3Vic2NyaWJlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZSA9IHN1YnNjcmliZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XHJcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgpO1xyXG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcclxuICAgICAgICBvYnNlcnZhYmxlLm9wZXJhdG9yID0gb3BlcmF0b3I7XHJcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBzdWJzY3JpYmVyID0gaXNTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0KSA/IG9ic2VydmVyT3JOZXh0IDogbmV3IFNhZmVTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xyXG4gICAgICAgIGVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLCBvcGVyYXRvciA9IF9hLm9wZXJhdG9yLCBzb3VyY2UgPSBfYS5zb3VyY2U7XHJcbiAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKG9wZXJhdG9yXHJcbiAgICAgICAgICAgICAgICA/XHJcbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3IuY2FsbChzdWJzY3JpYmVyLCBzb3VyY2UpXHJcbiAgICAgICAgICAgICAgICA6IHNvdXJjZVxyXG4gICAgICAgICAgICAgICAgICAgID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3N1YnNjcmliZShzdWJzY3JpYmVyKVxyXG4gICAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3RyeVN1YnNjcmliZShzdWJzY3JpYmVyKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3RyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChzaW5rKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShzaW5rKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBzaW5rLmVycm9yKGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAobmV4dCwgcHJvbWlzZUN0b3IpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xyXG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICB2YXIgc3Vic2NyaWJlciA9IG5ldyBTYWZlU3Vic2NyaWJlcih7XHJcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlcnJvcjogcmVqZWN0LFxyXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IHJlc29sdmUsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLnNvdXJjZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZVtTeW1ib2xfb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgb3BlcmF0aW9ucyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIG9wZXJhdGlvbnNbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBpcGVGcm9tQXJyYXkob3BlcmF0aW9ucykodGhpcyk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUudG9Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2VDdG9yKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBwcm9taXNlQ3RvciA9IGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKTtcclxuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlO1xyXG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHgpIHsgcmV0dXJuICh2YWx1ZSA9IHgpOyB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiByZWplY3QoZXJyKTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZSh2YWx1ZSk7IH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHN1YnNjcmliZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmUpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBPYnNlcnZhYmxlO1xyXG59KCkpO1xyXG5leHBvcnQgeyBPYnNlcnZhYmxlIH07XHJcbmZ1bmN0aW9uIGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICByZXR1cm4gKF9hID0gcHJvbWlzZUN0b3IgIT09IG51bGwgJiYgcHJvbWlzZUN0b3IgIT09IHZvaWQgMCA/IHByb21pc2VDdG9yIDogY29uZmlnLlByb21pc2UpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFByb21pc2U7XHJcbn1cclxuZnVuY3Rpb24gaXNPYnNlcnZlcih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUubmV4dCkgJiYgaXNGdW5jdGlvbih2YWx1ZS5lcnJvcikgJiYgaXNGdW5jdGlvbih2YWx1ZS5jb21wbGV0ZSk7XHJcbn1cclxuZnVuY3Rpb24gaXNTdWJzY3JpYmVyKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlIGluc3RhbmNlb2YgU3Vic2NyaWJlcikgfHwgKGlzT2JzZXJ2ZXIodmFsdWUpICYmIGlzU3Vic2NyaXB0aW9uKHZhbHVlKSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JzZXJ2YWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHknO1xyXG5leHBvcnQgZnVuY3Rpb24gcGlwZSgpIHtcclxuICAgIHZhciBmbnMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgZm5zW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGlwZUZyb21BcnJheShmbnMpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBwaXBlRnJvbUFycmF5KGZucykge1xyXG4gICAgaWYgKGZucy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XHJcbiAgICB9XHJcbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgIHJldHVybiBmbnNbMF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gcGlwZWQoaW5wdXQpIHtcclxuICAgICAgICByZXR1cm4gZm5zLnJlZHVjZShmdW5jdGlvbiAocHJldiwgZm4pIHsgcmV0dXJuIGZuKHByZXYpOyB9LCBpbnB1dCk7XHJcbiAgICB9O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpcGUuanMubWFwIiwiaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSB7XHJcbiAgICByZXR1cm4gaXNGdW5jdGlvbihpbnB1dFtTeW1ib2xfb2JzZXJ2YWJsZV0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSW50ZXJvcE9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XHJcbmV4cG9ydCBmdW5jdGlvbiBpc0FzeW5jSXRlcmFibGUob2JqKSB7XHJcbiAgICByZXR1cm4gU3ltYm9sLmFzeW5jSXRlcmF0b3IgJiYgaXNGdW5jdGlvbihvYmogPT09IG51bGwgfHwgb2JqID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FzeW5jSXRlcmFibGUuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KSB7XHJcbiAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihcIllvdSBwcm92aWRlZCBcIiArIChpbnB1dCAhPT0gbnVsbCAmJiB0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnID8gJ2FuIGludmFsaWQgb2JqZWN0JyA6IFwiJ1wiICsgaW5wdXQgKyBcIidcIikgKyBcIiB3aGVyZSBhIHN0cmVhbSB3YXMgZXhwZWN0ZWQuIFlvdSBjYW4gcHJvdmlkZSBhbiBPYnNlcnZhYmxlLCBQcm9taXNlLCBSZWFkYWJsZVN0cmVhbSwgQXJyYXksIEFzeW5jSXRlcmFibGUsIG9yIEl0ZXJhYmxlLlwiKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvd1Vub2JzZXJ2YWJsZUVycm9yLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBnZXRTeW1ib2xJdGVyYXRvcigpIHtcclxuICAgIGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nIHx8ICFTeW1ib2wuaXRlcmF0b3IpIHtcclxuICAgICAgICByZXR1cm4gJ0BAaXRlcmF0b3InO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFN5bWJvbC5pdGVyYXRvcjtcclxufVxyXG5leHBvcnQgdmFyIGl0ZXJhdG9yID0gZ2V0U3ltYm9sSXRlcmF0b3IoKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXRlcmF0b3IuanMubWFwIiwiaW1wb3J0IHsgaXRlcmF0b3IgYXMgU3ltYm9sX2l0ZXJhdG9yIH0gZnJvbSAnLi4vc3ltYm9sL2l0ZXJhdG9yJztcclxuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XHJcbmV4cG9ydCBmdW5jdGlvbiBpc0l0ZXJhYmxlKGlucHV0KSB7XHJcbiAgICByZXR1cm4gaXNGdW5jdGlvbihpbnB1dCA9PT0gbnVsbCB8fCBpbnB1dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5wdXRbU3ltYm9sX2l0ZXJhdG9yXSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNJdGVyYWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBfX2FzeW5jR2VuZXJhdG9yLCBfX2F3YWl0LCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcclxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pIHtcclxuICAgIHJldHVybiBfX2FzeW5jR2VuZXJhdG9yKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcl8xKCkge1xyXG4gICAgICAgIHZhciByZWFkZXIsIF9hLCB2YWx1ZSwgZG9uZTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSByZWFkYWJsZVN0cmVhbS5nZXRSZWFkZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFsxLCAsIDksIDEwXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAyO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJ1ZSkgcmV0dXJuIFszLCA4XTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9fYXdhaXQocmVhZGVyLnJlYWQoKSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpLCB2YWx1ZSA9IF9hLnZhbHVlLCBkb25lID0gX2EuZG9uZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWRvbmUpIHJldHVybiBbMywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfX2F3YWl0KHZvaWQgMCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIsIF9iLnNlbnQoKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbNCwgX19hd2FpdCh2YWx1ZSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzQsIF9iLnNlbnQoKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6XHJcbiAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgMl07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA5OlxyXG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5yZWxlYXNlTG9jaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbN107XHJcbiAgICAgICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gWzJdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gaXNSZWFkYWJsZVN0cmVhbUxpa2Uob2JqKSB7XHJcbiAgICByZXR1cm4gaXNGdW5jdGlvbihvYmogPT09IG51bGwgfHwgb2JqID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmouZ2V0UmVhZGVyKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1JlYWRhYmxlU3RyZWFtTGlrZS5qcy5tYXAiLCJpbXBvcnQgeyBfX2FzeW5jVmFsdWVzLCBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yLCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBpc0FycmF5TGlrZSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheUxpa2UnO1xyXG5pbXBvcnQgeyBpc1Byb21pc2UgfSBmcm9tICcuLi91dGlsL2lzUHJvbWlzZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgaXNJbnRlcm9wT2JzZXJ2YWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7IGlzQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNBc3luY0l0ZXJhYmxlJztcclxuaW1wb3J0IHsgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IgfSBmcm9tICcuLi91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3InO1xyXG5pbXBvcnQgeyBpc0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0l0ZXJhYmxlJztcclxuaW1wb3J0IHsgaXNSZWFkYWJsZVN0cmVhbUxpa2UsIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IgfSBmcm9tICcuLi91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlJztcclxuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XHJcbmltcG9ydCB7IHJlcG9ydFVuaGFuZGxlZEVycm9yIH0gZnJvbSAnLi4vdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvcic7XHJcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XHJcbmV4cG9ydCBmdW5jdGlvbiBpbm5lckZyb20oaW5wdXQpIHtcclxuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcclxuICAgICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xyXG4gICAgICAgIGlmIChpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnJvbUludGVyb3BPYnNlcnZhYmxlKGlucHV0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlKGlucHV0KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnJvbUFycmF5TGlrZShpbnB1dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc1Byb21pc2UoaW5wdXQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmcm9tUHJvbWlzZShpbnB1dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc0FzeW5jSXRlcmFibGUoaW5wdXQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXN5bmNJdGVyYWJsZShpbnB1dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc0l0ZXJhYmxlKGlucHV0KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnJvbUl0ZXJhYmxlKGlucHV0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnJvbVJlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhyb3cgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tSW50ZXJvcE9ic2VydmFibGUob2JqKSB7XHJcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcclxuICAgICAgICB2YXIgb2JzID0gb2JqW1N5bWJvbF9vYnNlcnZhYmxlXSgpO1xyXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG9icy5zdWJzY3JpYmUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvYnMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm92aWRlZCBvYmplY3QgZG9lcyBub3QgY29ycmVjdGx5IGltcGxlbWVudCBTeW1ib2wub2JzZXJ2YWJsZScpO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21BcnJheUxpa2UoYXJyYXkpIHtcclxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoICYmICFzdWJzY3JpYmVyLmNsb3NlZDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChhcnJheVtpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tUHJvbWlzZShwcm9taXNlKSB7XHJcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcclxuICAgICAgICBwcm9taXNlXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XHJcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KVxyXG4gICAgICAgICAgICAudGhlbihudWxsLCByZXBvcnRVbmhhbmRsZWRFcnJvcik7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gZnJvbUl0ZXJhYmxlKGl0ZXJhYmxlKSB7XHJcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcclxuICAgICAgICB2YXIgZV8xLCBfYTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpdGVyYWJsZV8xID0gX192YWx1ZXMoaXRlcmFibGUpLCBpdGVyYWJsZV8xXzEgPSBpdGVyYWJsZV8xLm5leHQoKTsgIWl0ZXJhYmxlXzFfMS5kb25lOyBpdGVyYWJsZV8xXzEgPSBpdGVyYWJsZV8xLm5leHQoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gaXRlcmFibGVfMV8xLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxyXG4gICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZXJhYmxlXzFfMSAmJiAhaXRlcmFibGVfMV8xLmRvbmUgJiYgKF9hID0gaXRlcmFibGVfMS5yZXR1cm4pKSBfYS5jYWxsKGl0ZXJhYmxlXzEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cclxuICAgICAgICB9XHJcbiAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Bc3luY0l0ZXJhYmxlKGFzeW5jSXRlcmFibGUpIHtcclxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xyXG4gICAgICAgIHByb2Nlc3MoYXN5bmNJdGVyYWJsZSwgc3Vic2NyaWJlcikuY2F0Y2goZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tUmVhZGFibGVTdHJlYW1MaWtlKHJlYWRhYmxlU3RyZWFtKSB7XHJcbiAgICByZXR1cm4gZnJvbUFzeW5jSXRlcmFibGUocmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcihyZWFkYWJsZVN0cmVhbSkpO1xyXG59XHJcbmZ1bmN0aW9uIHByb2Nlc3MoYXN5bmNJdGVyYWJsZSwgc3Vic2NyaWJlcikge1xyXG4gICAgdmFyIGFzeW5jSXRlcmFibGVfMSwgYXN5bmNJdGVyYWJsZV8xXzE7XHJcbiAgICB2YXIgZV8yLCBfYTtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdmFsdWUsIGVfMl8xO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMCwgNSwgNiwgMTFdKTtcclxuICAgICAgICAgICAgICAgICAgICBhc3luY0l0ZXJhYmxlXzEgPSBfX2FzeW5jVmFsdWVzKGFzeW5jSXRlcmFibGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFs0LCBhc3luY0l0ZXJhYmxlXzEubmV4dCgpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShhc3luY0l0ZXJhYmxlXzFfMSA9IF9iLnNlbnQoKSwgIWFzeW5jSXRlcmFibGVfMV8xLmRvbmUpKSByZXR1cm4gWzMsIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYXN5bmNJdGVyYWJsZV8xXzEudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAzO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzMsIDFdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzMsIDExXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICBlXzJfMSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBlXzIgPSB7IGVycm9yOiBlXzJfMSB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgMTFdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbNiwgLCA5LCAxMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGFzeW5jSXRlcmFibGVfMV8xICYmICFhc3luY0l0ZXJhYmxlXzFfMS5kb25lICYmIChfYSA9IGFzeW5jSXRlcmFibGVfMS5yZXR1cm4pKSkgcmV0dXJuIFszLCA4XTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9hLmNhbGwoYXN5bmNJdGVyYWJsZV8xKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6XHJcbiAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gODtcclxuICAgICAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFszLCAxMF07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDk6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbN107XHJcbiAgICAgICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gWzddO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxMTpcclxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5uZXJGcm9tLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xyXG5leHBvcnQgZnVuY3Rpb24gaGFzTGlmdChzb3VyY2UpIHtcclxuICAgIHJldHVybiBpc0Z1bmN0aW9uKHNvdXJjZSA9PT0gbnVsbCB8fCBzb3VyY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNvdXJjZS5saWZ0KTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gb3BlcmF0ZShpbml0KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xyXG4gICAgICAgIGlmIChoYXNMaWZ0KHNvdXJjZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KGZ1bmN0aW9uIChsaWZ0ZWRTb3VyY2UpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluaXQobGlmdGVkU291cmNlLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmFibGUgdG8gbGlmdCB1bmtub3duIE9ic2VydmFibGUgdHlwZScpO1xyXG4gICAgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1saWZ0LmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSkge1xyXG4gICAgcmV0dXJuIG5ldyBPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSk7XHJcbn1cclxudmFyIE9wZXJhdG9yU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoT3BlcmF0b3JTdWJzY3JpYmVyLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUsIHNob3VsZFVuc3Vic2NyaWJlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMub25GaW5hbGl6ZSA9IG9uRmluYWxpemU7XHJcbiAgICAgICAgX3RoaXMuc2hvdWxkVW5zdWJzY3JpYmUgPSBzaG91bGRVbnN1YnNjcmliZTtcclxuICAgICAgICBfdGhpcy5fbmV4dCA9IG9uTmV4dFxyXG4gICAgICAgICAgICA/IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBvbk5leHQodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9uZXh0O1xyXG4gICAgICAgIF90aGlzLl9lcnJvciA9IG9uRXJyb3JcclxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIDogX3N1cGVyLnByb3RvdHlwZS5fZXJyb3I7XHJcbiAgICAgICAgX3RoaXMuX2NvbXBsZXRlID0gb25Db21wbGV0ZVxyXG4gICAgICAgICAgICA/IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBPcGVyYXRvclN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBpZiAoIXRoaXMuc2hvdWxkVW5zdWJzY3JpYmUgfHwgdGhpcy5zaG91bGRVbnN1YnNjcmliZSgpKSB7XHJcbiAgICAgICAgICAgIHZhciBjbG9zZWRfMSA9IHRoaXMuY2xvc2VkO1xyXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICFjbG9zZWRfMSAmJiAoKF9hID0gdGhpcy5vbkZpbmFsaXplKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBPcGVyYXRvclN1YnNjcmliZXI7XHJcbn0oU3Vic2NyaWJlcikpO1xyXG5leHBvcnQgeyBPcGVyYXRvclN1YnNjcmliZXIgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T3BlcmF0b3JTdWJzY3JpYmVyLmpzLm1hcCIsImltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xyXG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XHJcbmV4cG9ydCBmdW5jdGlvbiBtYXAocHJvamVjdCwgdGhpc0FyZykge1xyXG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xyXG4gICAgICAgIHZhciBpbmRleCA9IDA7XHJcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChwcm9qZWN0LmNhbGwodGhpc0FyZywgdmFsdWUsIGluZGV4KyspKTtcclxuICAgICAgICB9KSk7XHJcbiAgICB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXAuanMubWFwIiwiaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi9tYXAnO1xyXG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XHJcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xyXG5pbXBvcnQgeyBtZXJnZUludGVybmFscyB9IGZyb20gJy4vbWVyZ2VJbnRlcm5hbHMnO1xyXG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcclxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlTWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yLCBjb25jdXJyZW50KSB7XHJcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7IGNvbmN1cnJlbnQgPSBJbmZpbml0eTsgfVxyXG4gICAgaWYgKGlzRnVuY3Rpb24ocmVzdWx0U2VsZWN0b3IpKSB7XHJcbiAgICAgICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uIChhLCBpKSB7IHJldHVybiBtYXAoZnVuY3Rpb24gKGIsIGlpKSB7IHJldHVybiByZXN1bHRTZWxlY3RvcihhLCBiLCBpLCBpaSk7IH0pKGlubmVyRnJvbShwcm9qZWN0KGEsIGkpKSk7IH0sIGNvbmN1cnJlbnQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIHJlc3VsdFNlbGVjdG9yID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgIGNvbmN1cnJlbnQgPSByZXN1bHRTZWxlY3RvcjtcclxuICAgIH1cclxuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHsgcmV0dXJuIG1lcmdlSW50ZXJuYWxzKHNvdXJjZSwgc3Vic2NyaWJlciwgcHJvamVjdCwgY29uY3VycmVudCk7IH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlTWFwLmpzLm1hcCIsImltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcclxuaW1wb3J0IHsgZXhlY3V0ZVNjaGVkdWxlIH0gZnJvbSAnLi4vdXRpbC9leGVjdXRlU2NoZWR1bGUnO1xyXG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XHJcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUludGVybmFscyhzb3VyY2UsIHN1YnNjcmliZXIsIHByb2plY3QsIGNvbmN1cnJlbnQsIG9uQmVmb3JlTmV4dCwgZXhwYW5kLCBpbm5lclN1YlNjaGVkdWxlciwgYWRkaXRpb25hbEZpbmFsaXplcikge1xyXG4gICAgdmFyIGJ1ZmZlciA9IFtdO1xyXG4gICAgdmFyIGFjdGl2ZSA9IDA7XHJcbiAgICB2YXIgaW5kZXggPSAwO1xyXG4gICAgdmFyIGlzQ29tcGxldGUgPSBmYWxzZTtcclxuICAgIHZhciBjaGVja0NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChpc0NvbXBsZXRlICYmICFidWZmZXIubGVuZ3RoICYmICFhY3RpdmUpIHtcclxuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB2YXIgb3V0ZXJOZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAoYWN0aXZlIDwgY29uY3VycmVudCA/IGRvSW5uZXJTdWIodmFsdWUpIDogYnVmZmVyLnB1c2godmFsdWUpKTsgfTtcclxuICAgIHZhciBkb0lubmVyU3ViID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgZXhwYW5kICYmIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XHJcbiAgICAgICAgYWN0aXZlKys7XHJcbiAgICAgICAgdmFyIGlubmVyQ29tcGxldGUgPSBmYWxzZTtcclxuICAgICAgICBpbm5lckZyb20ocHJvamVjdCh2YWx1ZSwgaW5kZXgrKykpLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKGlubmVyVmFsdWUpIHtcclxuICAgICAgICAgICAgb25CZWZvcmVOZXh0ID09PSBudWxsIHx8IG9uQmVmb3JlTmV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25CZWZvcmVOZXh0KGlubmVyVmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAoZXhwYW5kKSB7XHJcbiAgICAgICAgICAgICAgICBvdXRlck5leHQoaW5uZXJWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoaW5uZXJWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlubmVyQ29tcGxldGUgPSB0cnVlO1xyXG4gICAgICAgIH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoaW5uZXJDb21wbGV0ZSkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBhY3RpdmUtLTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlcmVkVmFsdWUgPSBidWZmZXIuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlubmVyU3ViU2NoZWR1bGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgaW5uZXJTdWJTY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvSW5uZXJTdWIoYnVmZmVyZWRWYWx1ZSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9Jbm5lclN1YihidWZmZXJlZFZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGJ1ZmZlci5sZW5ndGggJiYgYWN0aXZlIDwgY29uY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbG9vcF8xKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KSk7XHJcbiAgICB9O1xyXG4gICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgb3V0ZXJOZXh0LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XHJcbiAgICAgICAgY2hlY2tDb21wbGV0ZSgpO1xyXG4gICAgfSkpO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBhZGRpdGlvbmFsRmluYWxpemVyID09PSBudWxsIHx8IGFkZGl0aW9uYWxGaW5hbGl6ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFkZGl0aW9uYWxGaW5hbGl6ZXIoKTtcclxuICAgIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VJbnRlcm5hbHMuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IG1hcCB9IGZyb20gXCIuLi9vcGVyYXRvcnMvbWFwXCI7XHJcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcclxuZnVuY3Rpb24gY2FsbE9yQXBwbHkoZm4sIGFyZ3MpIHtcclxuICAgIHJldHVybiBpc0FycmF5KGFyZ3MpID8gZm4uYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpKSA6IGZuKGFyZ3MpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBtYXBPbmVPck1hbnlBcmdzKGZuKSB7XHJcbiAgICByZXR1cm4gbWFwKGZ1bmN0aW9uIChhcmdzKSB7IHJldHVybiBjYWxsT3JBcHBseShmbiwgYXJncyk7IH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcE9uZU9yTWFueUFyZ3MuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkIH0gZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xyXG5pbXBvcnQgeyBtZXJnZU1hcCB9IGZyb20gJy4uL29wZXJhdG9ycy9tZXJnZU1hcCc7XHJcbmltcG9ydCB7IGlzQXJyYXlMaWtlIH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5TGlrZSc7XHJcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xyXG5pbXBvcnQgeyBtYXBPbmVPck1hbnlBcmdzIH0gZnJvbSAnLi4vdXRpbC9tYXBPbmVPck1hbnlBcmdzJztcclxudmFyIG5vZGVFdmVudEVtaXR0ZXJNZXRob2RzID0gWydhZGRMaXN0ZW5lcicsICdyZW1vdmVMaXN0ZW5lciddO1xyXG52YXIgZXZlbnRUYXJnZXRNZXRob2RzID0gWydhZGRFdmVudExpc3RlbmVyJywgJ3JlbW92ZUV2ZW50TGlzdGVuZXInXTtcclxudmFyIGpxdWVyeU1ldGhvZHMgPSBbJ29uJywgJ29mZiddO1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbUV2ZW50KHRhcmdldCwgZXZlbnROYW1lLCBvcHRpb25zLCByZXN1bHRTZWxlY3Rvcikge1xyXG4gICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucykpIHtcclxuICAgICAgICByZXN1bHRTZWxlY3RvciA9IG9wdGlvbnM7XHJcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIGlmIChyZXN1bHRTZWxlY3Rvcikge1xyXG4gICAgICAgIHJldHVybiBmcm9tRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIG9wdGlvbnMpLnBpcGUobWFwT25lT3JNYW55QXJncyhyZXN1bHRTZWxlY3RvcikpO1xyXG4gICAgfVxyXG4gICAgdmFyIF9hID0gX19yZWFkKGlzRXZlbnRUYXJnZXQodGFyZ2V0KVxyXG4gICAgICAgID8gZXZlbnRUYXJnZXRNZXRob2RzLm1hcChmdW5jdGlvbiAobWV0aG9kTmFtZSkgeyByZXR1cm4gZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIHRhcmdldFttZXRob2ROYW1lXShldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpOyB9OyB9KVxyXG4gICAgICAgIDpcclxuICAgICAgICAgICAgaXNOb2RlU3R5bGVFdmVudEVtaXR0ZXIodGFyZ2V0KVxyXG4gICAgICAgICAgICAgICAgPyBub2RlRXZlbnRFbWl0dGVyTWV0aG9kcy5tYXAodG9Db21tb25IYW5kbGVyUmVnaXN0cnkodGFyZ2V0LCBldmVudE5hbWUpKVxyXG4gICAgICAgICAgICAgICAgOiBpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldClcclxuICAgICAgICAgICAgICAgICAgICA/IGpxdWVyeU1ldGhvZHMubWFwKHRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5KHRhcmdldCwgZXZlbnROYW1lKSlcclxuICAgICAgICAgICAgICAgICAgICA6IFtdLCAyKSwgYWRkID0gX2FbMF0sIHJlbW92ZSA9IF9hWzFdO1xyXG4gICAgaWYgKCFhZGQpIHtcclxuICAgICAgICBpZiAoaXNBcnJheUxpa2UodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbWVyZ2VNYXAoZnVuY3Rpb24gKHN1YlRhcmdldCkgeyByZXR1cm4gZnJvbUV2ZW50KHN1YlRhcmdldCwgZXZlbnROYW1lLCBvcHRpb25zKTsgfSkoaW5uZXJGcm9tKHRhcmdldCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghYWRkKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBldmVudCB0YXJnZXQnKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xyXG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVyLm5leHQoMSA8IGFyZ3MubGVuZ3RoID8gYXJncyA6IGFyZ3NbMF0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgYWRkKGhhbmRsZXIpO1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiByZW1vdmUoaGFuZGxlcik7IH07XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiB0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSh0YXJnZXQsIGV2ZW50TmFtZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7IHJldHVybiBmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gdGFyZ2V0W21ldGhvZE5hbWVdKGV2ZW50TmFtZSwgaGFuZGxlcik7IH07IH07XHJcbn1cclxuZnVuY3Rpb24gaXNOb2RlU3R5bGVFdmVudEVtaXR0ZXIodGFyZ2V0KSB7XHJcbiAgICByZXR1cm4gaXNGdW5jdGlvbih0YXJnZXQuYWRkTGlzdGVuZXIpICYmIGlzRnVuY3Rpb24odGFyZ2V0LnJlbW92ZUxpc3RlbmVyKTtcclxufVxyXG5mdW5jdGlvbiBpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldCkge1xyXG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odGFyZ2V0Lm9uKSAmJiBpc0Z1bmN0aW9uKHRhcmdldC5vZmYpO1xyXG59XHJcbmZ1bmN0aW9uIGlzRXZlbnRUYXJnZXQodGFyZ2V0KSB7XHJcbiAgICByZXR1cm4gaXNGdW5jdGlvbih0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikgJiYgaXNGdW5jdGlvbih0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcik7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbUV2ZW50LmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xyXG52YXIgQWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhBY3Rpb24sIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICB9XHJcbiAgICBBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xyXG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBBY3Rpb247XHJcbn0oU3Vic2NyaXB0aW9uKSk7XHJcbmV4cG9ydCB7IEFjdGlvbiB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1BY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XHJcbmV4cG9ydCB2YXIgaW50ZXJ2YWxQcm92aWRlciA9IHtcclxuICAgIHNldEludGVydmFsOiBmdW5jdGlvbiAoaGFuZGxlciwgdGltZW91dCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gaW50ZXJ2YWxQcm92aWRlci5kZWxlZ2F0ZTtcclxuICAgICAgICBpZiAoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLnNldEludGVydmFsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZS5zZXRJbnRlcnZhbC5hcHBseShkZWxlZ2F0ZSwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2V0SW50ZXJ2YWwuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XHJcbiAgICB9LFxyXG4gICAgY2xlYXJJbnRlcnZhbDogZnVuY3Rpb24gKGhhbmRsZSkge1xyXG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGludGVydmFsUHJvdmlkZXIuZGVsZWdhdGU7XHJcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLmNsZWFySW50ZXJ2YWwpIHx8IGNsZWFySW50ZXJ2YWwpKGhhbmRsZSk7XHJcbiAgICB9LFxyXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcclxufTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJ2YWxQcm92aWRlci5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnLi9BY3Rpb24nO1xyXG5pbXBvcnQgeyBpbnRlcnZhbFByb3ZpZGVyIH0gZnJvbSAnLi9pbnRlcnZhbFByb3ZpZGVyJztcclxuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi4vdXRpbC9hcnJSZW1vdmUnO1xyXG52YXIgQXN5bmNBY3Rpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEFzeW5jQWN0aW9uLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQXN5bmNBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgc2NoZWR1bGVyLCB3b3JrKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcclxuICAgICAgICBfdGhpcy53b3JrID0gd29yaztcclxuICAgICAgICBfdGhpcy5wZW5kaW5nID0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cclxuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgICAgICB2YXIgaWQgPSB0aGlzLmlkO1xyXG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcclxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBkZWxheSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucGVuZGluZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5kZWxheSA9IGRlbGF5O1xyXG4gICAgICAgIHRoaXMuaWQgPSAoX2EgPSB0aGlzLmlkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLnJlcXVlc3RBc3luY0lkKHNjaGVkdWxlciwgdGhpcy5pZCwgZGVsYXkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5yZXF1ZXN0QXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIF9pZCwgZGVsYXkpIHtcclxuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cclxuICAgICAgICByZXR1cm4gaW50ZXJ2YWxQcm92aWRlci5zZXRJbnRlcnZhbChzY2hlZHVsZXIuZmx1c2guYmluZChzY2hlZHVsZXIsIHRoaXMpLCBkZWxheSk7XHJcbiAgICB9O1xyXG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnJlY3ljbGVBc3luY0lkID0gZnVuY3Rpb24gKF9zY2hlZHVsZXIsIGlkLCBkZWxheSkge1xyXG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxyXG4gICAgICAgIGlmIChkZWxheSAhPSBudWxsICYmIHRoaXMuZGVsYXkgPT09IGRlbGF5ICYmIHRoaXMucGVuZGluZyA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpbnRlcnZhbFByb3ZpZGVyLmNsZWFySW50ZXJ2YWwoaWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfTtcclxuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xyXG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdleGVjdXRpbmcgYSBjYW5jZWxsZWQgYWN0aW9uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBlcnJvciA9IHRoaXMuX2V4ZWN1dGUoc3RhdGUsIGRlbGF5KTtcclxuICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLnBlbmRpbmcgPT09IGZhbHNlICYmIHRoaXMuaWQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZCh0aGlzLnNjaGVkdWxlciwgdGhpcy5pZCwgbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5fZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgX2RlbGF5KSB7XHJcbiAgICAgICAgdmFyIGVycm9yZWQgPSBmYWxzZTtcclxuICAgICAgICB2YXIgZXJyb3JWYWx1ZTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB0aGlzLndvcmsoc3RhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBlcnJvcmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgZXJyb3JWYWx1ZSA9IGUgPyBlIDogbmV3IEVycm9yKCdTY2hlZHVsZWQgYWN0aW9uIHRocmV3IGZhbHN5IGVycm9yJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChlcnJvcmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yVmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XHJcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIGlkID0gX2EuaWQsIHNjaGVkdWxlciA9IF9hLnNjaGVkdWxlcjtcclxuICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBzY2hlZHVsZXIuYWN0aW9ucztcclxuICAgICAgICAgICAgdGhpcy53b3JrID0gdGhpcy5zdGF0ZSA9IHRoaXMuc2NoZWR1bGVyID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGFyclJlbW92ZShhY3Rpb25zLCB0aGlzKTtcclxuICAgICAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHNjaGVkdWxlciwgaWQsIG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZGVsYXkgPSBudWxsO1xyXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBBc3luY0FjdGlvbjtcclxufShBY3Rpb24pKTtcclxuZXhwb3J0IHsgQXN5bmNBY3Rpb24gfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNBY3Rpb24uanMubWFwIiwiZXhwb3J0IHZhciBkYXRlVGltZXN0YW1wUHJvdmlkZXIgPSB7XHJcbiAgICBub3c6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gKGRhdGVUaW1lc3RhbXBQcm92aWRlci5kZWxlZ2F0ZSB8fCBEYXRlKS5ub3coKTtcclxuICAgIH0sXHJcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxyXG59O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRlVGltZXN0YW1wUHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgZGF0ZVRpbWVzdGFtcFByb3ZpZGVyIH0gZnJvbSAnLi9zY2hlZHVsZXIvZGF0ZVRpbWVzdGFtcFByb3ZpZGVyJztcclxudmFyIFNjaGVkdWxlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTY2hlZHVsZXIoc2NoZWR1bGVyQWN0aW9uQ3Rvciwgbm93KSB7XHJcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7IG5vdyA9IFNjaGVkdWxlci5ub3c7IH1cclxuICAgICAgICB0aGlzLnNjaGVkdWxlckFjdGlvbkN0b3IgPSBzY2hlZHVsZXJBY3Rpb25DdG9yO1xyXG4gICAgICAgIHRoaXMubm93ID0gbm93O1xyXG4gICAgfVxyXG4gICAgU2NoZWR1bGVyLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uICh3b3JrLCBkZWxheSwgc3RhdGUpIHtcclxuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cclxuICAgICAgICByZXR1cm4gbmV3IHRoaXMuc2NoZWR1bGVyQWN0aW9uQ3Rvcih0aGlzLCB3b3JrKS5zY2hlZHVsZShzdGF0ZSwgZGVsYXkpO1xyXG4gICAgfTtcclxuICAgIFNjaGVkdWxlci5ub3cgPSBkYXRlVGltZXN0YW1wUHJvdmlkZXIubm93O1xyXG4gICAgcmV0dXJuIFNjaGVkdWxlcjtcclxufSgpKTtcclxuZXhwb3J0IHsgU2NoZWR1bGVyIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNjaGVkdWxlci5qcy5tYXAiLCJpbXBvcnQgeyBBc3luY0FjdGlvbiB9IGZyb20gJy4vQXN5bmNBY3Rpb24nO1xyXG5pbXBvcnQgeyBBc3luY1NjaGVkdWxlciB9IGZyb20gJy4vQXN5bmNTY2hlZHVsZXInO1xyXG5leHBvcnQgdmFyIGFzeW5jU2NoZWR1bGVyID0gbmV3IEFzeW5jU2NoZWR1bGVyKEFzeW5jQWN0aW9uKTtcclxuZXhwb3J0IHZhciBhc3luYyA9IGFzeW5jU2NoZWR1bGVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3luYy5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgU2NoZWR1bGVyIH0gZnJvbSAnLi4vU2NoZWR1bGVyJztcclxudmFyIEFzeW5jU2NoZWR1bGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhBc3luY1NjaGVkdWxlciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEFzeW5jU2NoZWR1bGVyKFNjaGVkdWxlckFjdGlvbiwgbm93KSB7XHJcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7IG5vdyA9IFNjaGVkdWxlci5ub3c7IH1cclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBTY2hlZHVsZXJBY3Rpb24sIG5vdykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5hY3Rpb25zID0gW107XHJcbiAgICAgICAgX3RoaXMuX2FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIEFzeW5jU2NoZWR1bGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB2YXIgYWN0aW9ucyA9IHRoaXMuYWN0aW9ucztcclxuICAgICAgICBpZiAodGhpcy5fYWN0aXZlKSB7XHJcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaChhY3Rpb24pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBlcnJvcjtcclxuICAgICAgICB0aGlzLl9hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgaWYgKChlcnJvciA9IGFjdGlvbi5leGVjdXRlKGFjdGlvbi5zdGF0ZSwgYWN0aW9uLmRlbGF5KSkpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpIHtcclxuICAgICAgICAgICAgICAgIGFjdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gQXN5bmNTY2hlZHVsZXI7XHJcbn0oU2NoZWR1bGVyKSk7XHJcbmV4cG9ydCB7IEFzeW5jU2NoZWR1bGVyIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jU2NoZWR1bGVyLmpzLm1hcCIsImV4cG9ydCBjb25zdCBlbnZpcm9tZW50cyA9IHtcclxuICAgIERCX1VSTDogXCJodHRwOi8vbG9jYWxob3N0OjMwMDAvY29tcG9uZW50cy9cIixcclxuICAgIEFQSV9LRVk6IFwiOWViYzliMGZjZGYzOTNhODk1MmY0YzdkYzAzYzBhMDUwOTc4NTIzMlwiXHJcbn1cclxuIiwiaW1wb3J0IHsgZmlsdGVyLCBmcm9tLCBPYnNlcnZhYmxlLCBvZiwgc3dpdGNoTWFwIH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIi4uL0ludGVyZmFjZS9Db21wb25lbnRcIjtcclxuaW1wb3J0IHsgZW52aXJvbWVudHMgfSBmcm9tIFwiLi4vZW52aXJvbWVudHNcIjtcclxuaW1wb3J0IHsgZmlsbFRhYmxlIH0gZnJvbSBcIi4uL3ZpZXdzL3Nob3AvdGFibGUvdGFibGVGdW5jdGlvbnNcIjtcclxuXHJcbi8vY29tcG9uZW50cyBPYnNlcnZhYmxlXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRDb21wb25lbnRzKGNvbXBvbmVudE5hbWU/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPENvbXBvbmVudFtdPiB7XHJcbiAgICBjb25zdCBzZWFyY2hOYW1lID0gY29tcG9uZW50TmFtZTtcclxuICAgIHNlYXJjaE5hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgIC8qIGNvbnNvbGUubG9nKFwiUHJlbmV0byBpbWUgaXogc2VhcmNoYm94YTogXCIsIGNvbXBvbmVudE5hbWUpICovXHJcbiAgICBjb25zdCBwcm9taXNlID0gZmV0Y2goZW52aXJvbWVudHMuREJfVVJMKVxyXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29tcG9uZW50cyBub3QgZm91bmRcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbigoZGF0YTogQ29tcG9uZW50W10pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZmlsdGVyZWRDb21wb25lbnRzID0gZGF0YS5maWx0ZXIoKGNvbXBvbmVudCkgPT4gICAgICAgLy9tb3pkYSBvdmRlIHByb2JsZW1cclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5pdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgLnRvTG93ZXJDYXNlKClcclxuICAgICAgICAgICAgICAgICAgICAuaW5jbHVkZXMoc2VhcmNoTmFtZSlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZpbHRlcmVkQ29tcG9uZW50cztcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfSlcclxuICAgIGNvbnNvbGUubG9nKHByb21pc2UpXHJcbiAgICByZXR1cm4gZnJvbShwcm9taXNlKVxyXG59XHJcbiIsImltcG9ydCB7IHNjaGVkdWxlZCB9IGZyb20gJy4uL3NjaGVkdWxlZC9zY2hlZHVsZWQnO1xyXG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuL2lubmVyRnJvbSc7XHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tKGlucHV0LCBzY2hlZHVsZXIpIHtcclxuICAgIHJldHVybiBzY2hlZHVsZXIgPyBzY2hlZHVsZWQoaW5wdXQsIHNjaGVkdWxlcikgOiBpbm5lckZyb20oaW5wdXQpO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb20uanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlU2VhcmNoIH0gZnJvbSBcIi4vc2VhcmNoL3NlYXJjaFwiO1xyXG5pbXBvcnQgeyBjcmVhdGVUYWJsZSB9IGZyb20gXCIuL3RhYmxlL3RhYmxlXCI7XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNob3BTZWN0aW9uKHdvcmtzcGFjZUNvbnRhaW5lcjogSFRNTEVsZW1lbnQpOiBIVE1MRWxlbWVudCB7XHJcblxyXG4gICAgY29uc3Qgc2hvcENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgc2hvcENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdzaG9wLWNvbnRhaW5lcicpO1xyXG4gICAgd29ya3NwYWNlQ29udGFpbmVyLmFwcGVuZENoaWxkKHNob3BDb250YWluZXIpO1xyXG5cclxuICAgIGNvbnN0IHNob3BUaXRsZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgc2hvcFRpdGxlQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3Nob3AtdGl0bGUtY29udGFpbmVyJyk7XHJcbiAgICBzaG9wQ29udGFpbmVyLmFwcGVuZENoaWxkKHNob3BUaXRsZUNvbnRhaW5lcik7XHJcblxyXG4gICAgY29uc3Qgc2hvcFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDInKTtcclxuICAgIHNob3BUaXRsZS5jbGFzc0xpc3QuYWRkKCdzaG9wLXRpdGxlJyk7XHJcbiAgICBzaG9wVGl0bGUuaW5uZXJIVE1MID0gXCJJTlRFUk5BVElPTkFMIFNIT1BcIjtcclxuICAgIHNob3BUaXRsZUNvbnRhaW5lci5hcHBlbmRDaGlsZChzaG9wVGl0bGUpO1xyXG5cclxuICAgIGNyZWF0ZVNlYXJjaChzaG9wQ29udGFpbmVyKTtcclxuXHJcbiAgICBjcmVhdGVUYWJsZShzaG9wQ29udGFpbmVyKTtcclxuXHJcbiAgICByZXR1cm4gc2hvcENvbnRhaW5lcjtcclxufVxyXG4iLCJpbXBvcnQgeyBzZWFyY2hDb21wb25lbnRzIH0gZnJvbSBcIi4vc2VhcmNoRnVuY3Rpb25zXCI7XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlYXJjaChzaG9wQ29udGFpbmVyOiBIVE1MRWxlbWVudCk6IEhUTUxFbGVtZW50IHtcclxuXHJcbiAgICBjb25zdCBzZWFyY2hDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHNlYXJjaENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdzZWFyY2gtY29udGFpbmVyJyk7XHJcbiAgICBzaG9wQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlYXJjaENvbnRhaW5lcik7XHJcblxyXG4gICAgY29uc3Qgc2VhcmNoQmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcclxuICAgIHNlYXJjaEJhci5jbGFzc0xpc3QuYWRkKCdzZWFyY2gtYmFyJyk7XHJcbiAgICBzZWFyY2hCYXIucGxhY2Vob2xkZXIgPSBcIlNlYXJjaCBpdGVtcy4uLlwiO1xyXG4gICAgc2VhcmNoQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlYXJjaEJhcik7XHJcblxyXG4gICAgc2VhcmNoQ29tcG9uZW50cyhzZWFyY2hCYXIpO1xyXG5cclxuICAgIHJldHVybiBzZWFyY2hDb250YWluZXI7XHJcbn0iLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XHJcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xyXG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XHJcbmV4cG9ydCBmdW5jdGlvbiBzd2l0Y2hNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IpIHtcclxuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcclxuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpYmVyID0gbnVsbDtcclxuICAgICAgICB2YXIgaW5kZXggPSAwO1xyXG4gICAgICAgIHZhciBpc0NvbXBsZXRlID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIGNoZWNrQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0NvbXBsZXRlICYmICFpbm5lclN1YnNjcmliZXIgJiYgc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9O1xyXG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpbm5lclN1YnNjcmliZXIgPT09IG51bGwgfHwgaW5uZXJTdWJzY3JpYmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbm5lclN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgdmFyIGlubmVySW5kZXggPSAwO1xyXG4gICAgICAgICAgICB2YXIgb3V0ZXJJbmRleCA9IGluZGV4Kys7XHJcbiAgICAgICAgICAgIGlubmVyRnJvbShwcm9qZWN0KHZhbHVlLCBvdXRlckluZGV4KSkuc3Vic2NyaWJlKChpbm5lclN1YnNjcmliZXIgPSBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKGlubmVyVmFsdWUpIHsgcmV0dXJuIHN1YnNjcmliZXIubmV4dChyZXN1bHRTZWxlY3RvciA/IHJlc3VsdFNlbGVjdG9yKHZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4KyspIDogaW5uZXJWYWx1ZSk7IH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlubmVyU3Vic2NyaWJlciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBjaGVja0NvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgIH0pKSk7XHJcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpc0NvbXBsZXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgY2hlY2tDb21wbGV0ZSgpO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN3aXRjaE1hcC5qcy5tYXAiLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcclxuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xyXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyKHByZWRpY2F0ZSwgdGhpc0FyZykge1xyXG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xyXG4gICAgICAgIHZhciBpbmRleCA9IDA7XHJcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBwcmVkaWNhdGUuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaW5kZXgrKykgJiYgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSkpO1xyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyLmpzLm1hcCIsImltcG9ydCB7IGFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcclxuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XHJcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcclxuZXhwb3J0IGZ1bmN0aW9uIGRlYm91bmNlVGltZShkdWVUaW1lLCBzY2hlZHVsZXIpIHtcclxuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY1NjaGVkdWxlcjsgfVxyXG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xyXG4gICAgICAgIHZhciBhY3RpdmVUYXNrID0gbnVsbDtcclxuICAgICAgICB2YXIgbGFzdFZhbHVlID0gbnVsbDtcclxuICAgICAgICB2YXIgbGFzdFRpbWUgPSBudWxsO1xyXG4gICAgICAgIHZhciBlbWl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoYWN0aXZlVGFzaykge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlVGFzay51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlVGFzayA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBsYXN0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICBsYXN0VmFsdWUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZnVuY3Rpb24gZW1pdFdoZW5JZGxlKCkge1xyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0VGltZSA9IGxhc3RUaW1lICsgZHVlVGltZTtcclxuICAgICAgICAgICAgdmFyIG5vdyA9IHNjaGVkdWxlci5ub3coKTtcclxuICAgICAgICAgICAgaWYgKG5vdyA8IHRhcmdldFRpbWUpIHtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZVRhc2sgPSB0aGlzLnNjaGVkdWxlKHVuZGVmaW5lZCwgdGFyZ2V0VGltZSAtIG5vdyk7XHJcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChhY3RpdmVUYXNrKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbWl0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBsYXN0VmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgbGFzdFRpbWUgPSBzY2hlZHVsZXIubm93KCk7XHJcbiAgICAgICAgICAgIGlmICghYWN0aXZlVGFzaykge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlVGFzayA9IHNjaGVkdWxlci5zY2hlZHVsZShlbWl0V2hlbklkbGUsIGR1ZVRpbWUpO1xyXG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoYWN0aXZlVGFzayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGVtaXQoKTtcclxuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgIH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsYXN0VmFsdWUgPSBhY3RpdmVUYXNrID0gbnVsbDtcclxuICAgICAgICB9KSk7XHJcbiAgICB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJvdW5jZVRpbWUuanMubWFwIiwiaW1wb3J0IHsgZGVib3VuY2UsIGRlYm91bmNlVGltZSwgZmlsdGVyLCBmcm9tRXZlbnQsIG1hcCwgc3dpdGNoTWFwIH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IHsgZ2V0Q29tcG9uZW50cyB9IGZyb20gXCIuLi8uLi8uLi9mdW5jdGlvbnMvZ2V0Q29tcG9uZW50c1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNlYXJjaENvbXBvbmVudHMoaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQpIHtcclxuXHJcbiAgICBjb25zdCBpbnB1dEVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQgPSBpbnB1dDtcclxuICAgIGZyb21FdmVudChpbnB1dEVsZW1lbnQsIFwiaW5wdXRcIikucGlwZShcclxuICAgICAgICBkZWJvdW5jZVRpbWUoMTAwMCksXHJcbiAgICAgICAgbWFwKChldjogSW5wdXRFdmVudCkgPT4gKDxIVE1MSW5wdXRFbGVtZW50PmV2LnRhcmdldCkudmFsdWUpLCAgIC8vcHJldXppbWFuamUgc2VhcmNoIHZyZWRub3N0aVxyXG4gICAgICAgIGZpbHRlcigodHh0OiBzdHJpbmcpID0+IHR4dC5sZW5ndGggPj0gMiksXHJcbiAgICAgICAgc3dpdGNoTWFwKGNvbXBvbmVudE5hbWUgPT4gZ2V0Q29tcG9uZW50cyhjb21wb25lbnROYW1lKSkgICAgICAgIC8vc2FkcnphaiBzZWFyY2ggc2Ugc2FsamUgemEgcHJldHJhZ3Uga29tcG9uZW50aVxyXG4gICAgKS5zdWJzY3JpYmUoY29tcG9uZW50cyA9PiBjb25zb2xlLmxvZyhcInNlYXJjaCBkYjogXCIsIGNvbXBvbmVudHMpKTtcclxufSIsImltcG9ydCB7IGZpbGxUYWJsZSB9IGZyb20gXCIuL3RhYmxlRnVuY3Rpb25zXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGFibGUoc2hvcENvbnRhaW5lcjogSFRNTEVsZW1lbnQpIHtcclxuICAgIC8vPHRhYmxlPlxyXG4gICAgY29uc3Qgc2hvcFRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKTtcclxuICAgIHNob3BUYWJsZS5jbGFzc0xpc3QuYWRkKCdzaG9wLXRhYmxlJyk7XHJcbiAgICBzaG9wQ29udGFpbmVyLmFwcGVuZENoaWxkKHNob3BUYWJsZSk7XHJcbiAgICAvLzx0aGVhZD5cclxuICAgIGNvbnN0IHNob3BUYWJsZUhlYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aGVhZCcpO1xyXG4gICAgc2hvcFRhYmxlLmFwcGVuZENoaWxkKHNob3BUYWJsZUhlYWQpO1xyXG4gICAgLy88dHI+XHJcbiAgICBjb25zdCBzaG9wVGFibGVIZWFkUm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcclxuICAgIHNob3BUYWJsZUhlYWQuYXBwZW5kQ2hpbGQoc2hvcFRhYmxlSGVhZFJvdyk7XHJcbiAgICAvLzx0aD5cclxuICAgIGNvbnN0IHRhYmxlSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJyk7XHJcbiAgICB0YWJsZUl0ZW0uY2xhc3NMaXN0LmFkZCgnLnRhYmxlLWl0ZW0nKTtcclxuICAgIHRhYmxlSXRlbS5pbm5lckhUTUwgPSAnSXRlbSc7XHJcbiAgICBzaG9wVGFibGVIZWFkUm93LmFwcGVuZENoaWxkKHRhYmxlSXRlbSk7XHJcbiAgICAvLzx0aD5cclxuICAgIGNvbnN0IHRhYmxlUHJpY2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aCcpO1xyXG4gICAgdGFibGVQcmljZS5jbGFzc0xpc3QuYWRkKCd0YWJsZS1wcmljZScpO1xyXG4gICAgdGFibGVQcmljZS5pbm5lckhUTUwgPSAnUHJpY2UgUlNEJztcclxuICAgIHNob3BUYWJsZUhlYWRSb3cuYXBwZW5kQ2hpbGQodGFibGVQcmljZSk7XHJcbiAgICAvLzx0aD5cclxuICAgIGNvbnN0IHRhYmxlTWFudWZhY3R1cmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGgnKTtcclxuICAgIHRhYmxlTWFudWZhY3R1cmVyLmNsYXNzTGlzdC5hZGQoJ3RhYmxlLW1hbnVmYWN0dXJlcicpO1xyXG4gICAgdGFibGVNYW51ZmFjdHVyZXIuaW5uZXJIVE1MID0gJ01hbnVmYWN0dXJlcic7XHJcbiAgICBzaG9wVGFibGVIZWFkUm93LmFwcGVuZENoaWxkKHRhYmxlTWFudWZhY3R1cmVyKTtcclxuXHJcbiAgICAvLzx0Ym9keT5cclxuICAgIGNvbnN0IHNob3BUYWJsZUJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0Ym9keScpO1xyXG4gICAgc2hvcFRhYmxlQm9keS5jbGFzc0xpc3QuYWRkKCdzaG9wLXRhYmxlLWJvZHknKTtcclxuICAgIHNob3BUYWJsZS5hcHBlbmRDaGlsZChzaG9wVGFibGVCb2R5KTtcclxuXHJcblxyXG4gICAgZmlsbFRhYmxlKHNob3BUYWJsZUJvZHkpO1xyXG59XHJcblxyXG5cclxuIiwiaW1wb3J0IHsgZ2V0Q29tcG9uZW50cyB9IGZyb20gXCIuLi8uLi8uLi9mdW5jdGlvbnMvZ2V0Q29tcG9uZW50c1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbGxUYWJsZShzaG9wVGFibGVCb2R5OiBIVE1MRWxlbWVudCkge1xyXG5cclxuICAgIGdldENvbXBvbmVudHMoJycpLnN1YnNjcmliZSgoZGF0YSkgPT4ge1xyXG5cclxuICAgICAgICBjb25zdCBmaXJzdEZpZnRlZW4gPSBkYXRhLnNsaWNlKDAsIDE1KTtcclxuICAgICAgICBmaXJzdEZpZnRlZW4uZm9yRWFjaChjb21wb25lbnRzID0+IHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBpdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcclxuICAgICAgICAgICAgaXRlbS50ZXh0Q29udGVudCA9IGNvbXBvbmVudHMuaXRlbTtcclxuICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKGl0ZW0pO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcHJpY2VSU0QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xyXG4gICAgICAgICAgICBwcmljZVJTRC50ZXh0Q29udGVudCA9IGNvbXBvbmVudHMucHJpY2VSU0QudG9QcmVjaXNpb24oKTtcclxuICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKHByaWNlUlNEKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1hbnVmYWN0dXJlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XHJcbiAgICAgICAgICAgIG1hbnVmYWN0dXJlci50ZXh0Q29udGVudCA9IGNvbXBvbmVudHMubWFudWZhY3R1cmVyO1xyXG4gICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQobWFudWZhY3R1cmVyKTtcclxuXHJcbiAgICAgICAgICAgIHNob3BUYWJsZUJvZHkuYXBwZW5kQ2hpbGQocm93KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pXHJcbn0iLCJpbXBvcnQgeyBjcmVhdGVTaG9wU2VjdGlvbiB9IGZyb20gXCIuL3Nob3Avc2hvcFwiO1xyXG5pbXBvcnQgeyBjcmVhdGVXYWxsZXRTZWN0aW9uIH0gZnJvbSBcIi4vd2FsbGV0L3dhbGxldFwiO1xyXG5pbXBvcnQgeyBjcmVhdGVIZWFkZXJTZWN0aW9uIH0gZnJvbSBcIi4vaGVhZGVyL2hlYWRlclwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcigpIHtcclxuXHJcbiAgICBjb25zdCBhcHBDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGFwcENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdhcHAtY29udGFpbmVyJyk7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGFwcENvbnRhaW5lcik7XHJcblxyXG4gICAgY3JlYXRlSGVhZGVyU2VjdGlvbihhcHBDb250YWluZXIpO1xyXG5cclxuICAgIGNvbnN0IHdvcmtzcGFjZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgd29ya3NwYWNlQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3dvcmtzcGFjZS1jb250YWluZXInKTtcclxuICAgIGFwcENvbnRhaW5lci5hcHBlbmRDaGlsZCh3b3Jrc3BhY2VDb250YWluZXIpO1xyXG5cclxuICAgIGNvbnN0IHdhbGxldCA9IGNyZWF0ZVdhbGxldFNlY3Rpb24od29ya3NwYWNlQ29udGFpbmVyKTtcclxuICAgIHdvcmtzcGFjZUNvbnRhaW5lci5hcHBlbmRDaGlsZCh3YWxsZXQpO1xyXG5cclxuICAgIGNvbnN0IHNob3AgPSBjcmVhdGVTaG9wU2VjdGlvbih3b3Jrc3BhY2VDb250YWluZXIpO1xyXG4gICAgd29ya3NwYWNlQ29udGFpbmVyLmFwcGVuZENoaWxkKHNob3ApO1xyXG5cclxuXHJcbn0iLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlSGVhZGVyU2VjdGlvbihhcHBDb250YWluZXI6IEhUTUxFbGVtZW50KTogSFRNTEVsZW1lbnQge1xyXG5cclxuICAgIGNvbnN0IGhlYWRlckNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgaGVhZGVyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2hlYWRlci1jb250YWluZXInKTtcclxuICAgIGFwcENvbnRhaW5lci5hcHBlbmRDaGlsZChoZWFkZXJDb250YWluZXIpO1xyXG5cclxuICAgIGNvbnN0IGxvZ29Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGxvZ29Db250YWluZXIuY2xhc3NMaXN0LmFkZCgnbG9nby1jb250YWluZXInKTtcclxuICAgIGhlYWRlckNvbnRhaW5lci5hcHBlbmRDaGlsZChsb2dvQ29udGFpbmVyKTtcclxuXHJcbiAgICBjb25zdCBhcHBMb2dvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDEnKTtcclxuICAgIGFwcExvZ28uY2xhc3NMaXN0LmFkZCgnYXBwLWxvZ28nKVxyXG4gICAgYXBwTG9nby50ZXh0Q29udGVudCA9IFwiTE9HT1wiO1xyXG4gICAgbG9nb0NvbnRhaW5lci5hcHBlbmRDaGlsZChhcHBMb2dvKTtcclxuXHJcbiAgICBjb25zdCBhcHBUaXRsZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgYXBwVGl0bGVDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnYXBwLXRpdGxlLWNvbnRhaW5lcicpXHJcbiAgICBoZWFkZXJDb250YWluZXIuYXBwZW5kQ2hpbGQoYXBwVGl0bGVDb250YWluZXIpO1xyXG5cclxuICAgIGNvbnN0IGFwcFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDEnKTtcclxuICAgIGFwcFRpdGxlLmNsYXNzTGlzdC5hZGQoJ2FwcC10aXRsZScpXHJcbiAgICBhcHBUaXRsZS5pbm5lckhUTUwgPSBcIlRJVExFXCI7XHJcbiAgICBhcHBUaXRsZUNvbnRhaW5lci5hcHBlbmRDaGlsZChhcHBUaXRsZSk7XHJcblxyXG4gICAgcmV0dXJuIGFwcENvbnRhaW5lcjtcclxufSIsImltcG9ydCB7IGNyZWF0ZUJhbGFuY2UgfSBmcm9tIFwiLi9iYWxhbmNlL2JhbGFuY2VcIjtcclxuaW1wb3J0IHsgY3JlYXRlQ29udmVydCB9IGZyb20gXCIuL2NvbnZlcnQvY29udmVydFwiO1xyXG5pbXBvcnQgeyBjcmVhdGVEZXBvc2l0IH0gZnJvbSBcIi4vZGVwb3NpdC9kZXBvc2l0XCI7XHJcbmltcG9ydCB7IGNyZWF0ZVJhdGVzIH0gZnJvbSBcIi4vcmF0ZXMvcmF0ZXNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVXYWxsZXRTZWN0aW9uKHdvcmtzcGFjZUNvbnRhaW5lcjogSFRNTEVsZW1lbnQpOiBIVE1MRWxlbWVudCB7XHJcblxyXG4gICAgY29uc3Qgd2FsbGV0Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB3YWxsZXRDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnd2FsbGV0LWNvbnRhaW5lcicpO1xyXG4gICAgd29ya3NwYWNlQ29udGFpbmVyLmFwcGVuZENoaWxkKHdhbGxldENvbnRhaW5lcik7XHJcblxyXG4gICAgY29uc3Qgd2FsbGV0VGl0bGVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHdhbGxldFRpdGxlQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3dhbGxldC10aXRsZS1jb250YWluZXInKTtcclxuICAgIHdhbGxldENvbnRhaW5lci5hcHBlbmRDaGlsZCh3YWxsZXRUaXRsZUNvbnRhaW5lcik7XHJcblxyXG4gICAgY29uc3Qgd2FsbGV0VGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xyXG4gICAgd2FsbGV0VGl0bGUuY2xhc3NMaXN0LmFkZCgnd2FsbGV0LXRpdGxlJyk7XHJcbiAgICB3YWxsZXRUaXRsZS5pbm5lckhUTUwgPSBcIldBTExFVFwiO1xyXG4gICAgd2FsbGV0VGl0bGVDb250YWluZXIuYXBwZW5kQ2hpbGQod2FsbGV0VGl0bGUpO1xyXG5cclxuXHJcbiAgICBjcmVhdGVCYWxhbmNlKHdhbGxldENvbnRhaW5lcik7XHJcblxyXG4gICAgY3JlYXRlRGVwb3NpdCh3YWxsZXRDb250YWluZXIpO1xyXG5cclxuICAgIGNyZWF0ZUNvbnZlcnQod2FsbGV0Q29udGFpbmVyKTtcclxuXHJcbiAgICBjcmVhdGVSYXRlcyh3YWxsZXRDb250YWluZXIpO1xyXG5cclxuICAgIGNvbnN0IGNvbnZlcnNpb25JbmZvQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBjb252ZXJzaW9uSW5mb0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdjb252ZXJzaW9uLWluZm8tY29udGFpbmVyJyk7XHJcbiAgICB3YWxsZXRDb250YWluZXIuYXBwZW5kQ2hpbGQoY29udmVyc2lvbkluZm9Db250YWluZXIpO1xyXG5cclxuICAgIGNvbnN0IGNvbnZlcnNpb25JbmZvTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgIGNvbnZlcnNpb25JbmZvTGluay5jbGFzc0xpc3QuYWRkKCdjb252ZXJzaW9uLWluZm8tbGluaycpO1xyXG4gICAgY29udmVyc2lvbkluZm9MaW5rLmlubmVySFRNTCA9IFwiaTogY29udmVyc2lvbnMgYXJlIGRvbmUgdmlhIGxpdmUgZXhjaGFuZ2UgcmF0ZXNcIjtcclxuICAgIGNvbnZlcnNpb25JbmZvTGluay5ocmVmID0gXCJodHRwczovL3d3dy5tc24uY29tL2VuLXhsL21vbmV5L3BvcnRmb2xpbz90YWI9UmVsYXRlZCZpZD1hdnNhZWMmb2NpZD1hbnNNU05Nb25leTExJmR1cmF0aW9uPTFEJnNyYz1iX3JzY3JzbCZyZWxhdGVkUXVvdGVJZD1hdnNhZWMmcmVsYXRlZFNvdXJjZT1NbEFsXCI7XHJcbiAgICBjb252ZXJzaW9uSW5mb0NvbnRhaW5lci5hcHBlbmRDaGlsZChjb252ZXJzaW9uSW5mb0xpbmspO1xyXG5cclxuICAgIHJldHVybiB3YWxsZXRDb250YWluZXI7XHJcbn0iLCJcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCYWxhbmNlKHdhbGxldENvbnRhaW5lcjogSFRNTEVsZW1lbnQpIHtcclxuXHJcbiAgICBjb25zdCBiYWxhbmNlQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBiYWxhbmNlQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2JhbGFuY2UtY29udGFpbmVyJyk7XHJcbiAgICB3YWxsZXRDb250YWluZXIuYXBwZW5kQ2hpbGQoYmFsYW5jZUNvbnRhaW5lcik7XHJcblxyXG4gICAgY29uc3QgYmFsYW5jZUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcclxuICAgIGJhbGFuY2VMYWJlbC5jbGFzc0xpc3QuYWRkKCdiYWxhbmNlLXRpdGxlJyk7XHJcbiAgICBiYWxhbmNlTGFiZWwuaW5uZXJIVE1MID0gJ0JhbGFuY2U6ICc7XHJcbiAgICBiYWxhbmNlQ29udGFpbmVyLmFwcGVuZENoaWxkKGJhbGFuY2VMYWJlbCk7XHJcblxyXG4gICAgY29uc3QgYmFsYW5jZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgYmFsYW5jZS5jbGFzc0xpc3QuYWRkKCdiYWxhbmNlJyk7XHJcbiAgICBiYWxhbmNlLmlubmVySFRNTCA9IFwiNjAwMDBcIjtcclxuICAgIGJhbGFuY2VDb250YWluZXIuYXBwZW5kQ2hpbGQoYmFsYW5jZSk7XHJcbn0iLCJcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZXBvc2l0KHdhbGxldENvbnRhaW5lcjogSFRNTEVsZW1lbnQpIHtcclxuXHJcbiAgICBjb25zdCBkZXBvc2l0Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBkZXBvc2l0Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2RlcG9zaXQtY29udGFpbmVyJyk7XHJcbiAgICB3YWxsZXRDb250YWluZXIuYXBwZW5kQ2hpbGQoZGVwb3NpdENvbnRhaW5lcik7XHJcblxyXG4gICAgY29uc3QgZGVwb3NpdElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcclxuICAgIGRlcG9zaXRJbnB1dC5jbGFzc0xpc3QuYWRkKCdkZXBvc2l0LWlucHV0Jyk7XHJcbiAgICBkZXBvc2l0SW5wdXQucGxhY2Vob2xkZXIgPSBcIkVudGVyIGRlcG9zaXQgYW1vdW50XCI7XHJcbiAgICBkZXBvc2l0Q29udGFpbmVyLmFwcGVuZENoaWxkKGRlcG9zaXRJbnB1dCk7XHJcblxyXG4gICAgY29uc3QgZGVwb3NpdEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgZGVwb3NpdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKCd3YWxsZXQtYnV0dG9uJyk7XHJcbiAgICBkZXBvc2l0QnV0dG9uLmlubmVySFRNTCA9IFwiRGVwb3NpdFwiXHJcbiAgICBkZXBvc2l0Q29udGFpbmVyLmFwcGVuZENoaWxkKGRlcG9zaXRCdXR0b24pO1xyXG59IiwiXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29udmVydCh3YWxsZXRDb250YWluZXI6IEhUTUxFbGVtZW50KSB7XHJcbiAgICBjb25zdCBjb252ZXJ0Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBjb252ZXJ0Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2NvbnZlcnQtY29udGFpbmVyJyk7XHJcbiAgICB3YWxsZXRDb250YWluZXIuYXBwZW5kQ2hpbGQoY29udmVydENvbnRhaW5lcik7XHJcblxyXG4gICAgY29uc3QgY29udmVydFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcclxuICAgIGNvbnZlcnRUaXRsZS5jbGFzc0xpc3QuYWRkKCdjb252ZXJ0LXRpdGxlJyk7XHJcbiAgICBjb252ZXJ0VGl0bGUuaW5uZXJIVE1MID0gXCJDb252ZXJ0OiBcIjtcclxuICAgIGNvbnZlcnRDb250YWluZXIuYXBwZW5kQ2hpbGQoY29udmVydFRpdGxlKTtcclxuXHJcbiAgICBjb25zdCB0b0V1cm9Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHRvRXVyb0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCd0by1ldXJvLWNvbnRhaW5lcicpO1xyXG4gICAgY29udmVydENvbnRhaW5lci5hcHBlbmRDaGlsZCh0b0V1cm9Db250YWluZXIpO1xyXG5cclxuICAgIGNvbnN0IHRvRXVyb0Ftb3VudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICB0b0V1cm9BbW91bnQuY2xhc3NMaXN0LmFkZCgndG8tZXVyby1hbW91bnQnKTtcclxuICAgIHRvRXVyb0Ftb3VudC5wbGFjZWhvbGRlciA9IFwiQW1vdW50IChSU0QpXCI7XHJcbiAgICB0b0V1cm9Db250YWluZXIuYXBwZW5kQ2hpbGQodG9FdXJvQW1vdW50KTtcclxuXHJcbiAgICBjb25zdCB0b0V1cm9CdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgIHRvRXVyb0J1dHRvbi5jbGFzc0xpc3QuYWRkKCd3YWxsZXQtYnV0dG9uJyk7XHJcbiAgICB0b0V1cm9CdXR0b24uaW5uZXJIVE1MID0gXCJDb252ZXJ0IHRvIEVVUlwiO1xyXG4gICAgdG9FdXJvQ29udGFpbmVyLmFwcGVuZENoaWxkKHRvRXVyb0J1dHRvbik7XHJcblxyXG4gICAgY29uc3QgdG9Eb2xsYXJDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHRvRG9sbGFyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3RvLWRvbGxhci1jb250YWluZXInKTtcclxuICAgIGNvbnZlcnRDb250YWluZXIuYXBwZW5kQ2hpbGQodG9Eb2xsYXJDb250YWluZXIpO1xyXG5cclxuICAgIGNvbnN0IHRvRG9sbGFyQW1vdW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcclxuICAgIHRvRG9sbGFyQW1vdW50LmNsYXNzTGlzdC5hZGQoJ3RvLWRvbGxhci1hbW91bnQnKTtcclxuICAgIHRvRG9sbGFyQW1vdW50LnBsYWNlaG9sZGVyID0gXCJBbW91bnQgKFJTRClcIjtcclxuICAgIHRvRG9sbGFyQ29udGFpbmVyLmFwcGVuZENoaWxkKHRvRG9sbGFyQW1vdW50KTtcclxuXHJcbiAgICBjb25zdCB0b0RvbGxhckJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgdG9Eb2xsYXJCdXR0b24uY2xhc3NMaXN0LmFkZCgnd2FsbGV0LWJ1dHRvbicpO1xyXG4gICAgdG9Eb2xsYXJCdXR0b24uaW5uZXJIVE1MID0gXCJDb252ZXJ0IHRvIFVTRFwiO1xyXG4gICAgdG9Eb2xsYXJDb250YWluZXIuYXBwZW5kQ2hpbGQodG9Eb2xsYXJCdXR0b24pO1xyXG59IiwiXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSYXRlcyh3YWxsZXRDb250YWluZXI6IEhUTUxFbGVtZW50KXtcclxuXHJcbiAgICBjb25zdCByYXRlc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgcmF0ZXNDb250YWluZXIuY2xhc3NMaXN0LmFkZCgncmF0ZXMtY29udGFpbmVyJyk7XHJcbiAgICB3YWxsZXRDb250YWluZXIuYXBwZW5kQ2hpbGQocmF0ZXNDb250YWluZXIpO1xyXG5cclxuICAgIGNvbnN0IGJhbGFuY2VFdXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGJhbGFuY2VFdXIuY2xhc3NMaXN0LmFkZCgnYmFsYW5jZS1ldXInKTtcclxuICAgIHJhdGVzQ29udGFpbmVyLmFwcGVuZENoaWxkKGJhbGFuY2VFdXIpO1xyXG4gICAgYmFsYW5jZUV1ci5pbm5lclRleHQgPSBgQmFsYW5jZSBpbiBFVVI6IGA7XHJcblxyXG4gICAgY29uc3QgYmFsYW5jZVVzZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgYmFsYW5jZVVzZC5jbGFzc0xpc3QuYWRkKCdiYWxhbmNlLXVzZCcpO1xyXG4gICAgcmF0ZXNDb250YWluZXIuYXBwZW5kQ2hpbGQoYmFsYW5jZVVzZCk7XHJcbiAgICBiYWxhbmNlVXNkLmlubmVyVGV4dCA9IGBCYWxhbmNlIGluIFVTRDogYDtcclxuXHJcbn0iLCJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi92aWV3cy9tYWluXCI7XHJcbmltcG9ydCB7IGdldEN1cnJlbmN5TGlzdCwgZ2V0Q3VycmVuY3lDb252ZXJ0IH0gZnJvbSBcIi4vZnVuY3Rpb25zL2N1cnJlbmN5RnVuY3Rpb25zXCI7XHJcbmltcG9ydCB7IGdldENvbXBvbmVudHMgfSBmcm9tIFwiLi9mdW5jdGlvbnMvZ2V0Q29tcG9uZW50c1wiO1xyXG5cclxuXHJcbi8vdG9rIHBvZGF0YWthIC0+IGRyYXcgZnVua2NpamEgLT4gZmlsdGVyIG5hIHNlYXJjaFxyXG5cclxuXHJcbi8qIGdldEN1cnJlbmN5TGlzdCgpO1xyXG5nZXRDdXJyZW5jeUNvbnZlcnQoKTtcclxuICovXHJcbnJlbmRlcigpOyJdLCJuYW1lcyI6WyJleHRlbmRTdGF0aWNzIiwiZCIsImIiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9fZXh0ZW5kcyIsIlR5cGVFcnJvciIsIlN0cmluZyIsIl9fIiwidGhpcyIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiX19nZW5lcmF0b3IiLCJ0aGlzQXJnIiwiYm9keSIsImYiLCJ5IiwidCIsImciLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsIm5leHQiLCJ2ZXJiIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJuIiwidiIsIm9wIiwiZG9uZSIsInZhbHVlIiwicG9wIiwibGVuZ3RoIiwicHVzaCIsImUiLCJzdGVwIiwiX192YWx1ZXMiLCJvIiwicyIsIm0iLCJpIiwiX19yZWFkIiwiciIsImFyIiwiZXJyb3IiLCJfX3NwcmVhZEFycmF5IiwidG8iLCJmcm9tIiwicGFjayIsImFyZ3VtZW50cyIsImwiLCJzbGljZSIsImNvbmNhdCIsIl9fYXdhaXQiLCJTdXBwcmVzc2VkRXJyb3IiLCJpc0FycmF5TGlrZSIsIngiLCJpc0Z1bmN0aW9uIiwiaXNQcm9taXNlIiwidGhlbiIsImN0b3JGdW5jIiwiVW5zdWJzY3JpcHRpb25FcnJvciIsImVycm9ycyIsImluc3RhbmNlIiwiRXJyb3IiLCJzdGFjayIsIm1lc3NhZ2UiLCJtYXAiLCJlcnIiLCJ0b1N0cmluZyIsImpvaW4iLCJuYW1lIiwiYXJyUmVtb3ZlIiwiYXJyIiwiaXRlbSIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsIlN1YnNjcmlwdGlvbiIsImluaXRpYWxUZWFyZG93biIsImNsb3NlZCIsIl9wYXJlbnRhZ2UiLCJfZmluYWxpemVycyIsImVtcHR5IiwidW5zdWJzY3JpYmUiLCJlXzEiLCJfYSIsImVfMiIsIl9iIiwiaXNBcnJheSIsIl9wYXJlbnRhZ2VfMSIsIl9wYXJlbnRhZ2VfMV8xIiwicmVtb3ZlIiwiZV8xXzEiLCJyZXR1cm4iLCJpbml0aWFsRmluYWxpemVyIiwiX2ZpbmFsaXplcnNfMSIsIl9maW5hbGl6ZXJzXzFfMSIsImZpbmFsaXplciIsImV4ZWNGaW5hbGl6ZXIiLCJlXzJfMSIsImFkZCIsInRlYXJkb3duIiwiX2hhc1BhcmVudCIsIl9hZGRQYXJlbnQiLCJwYXJlbnQiLCJpbmNsdWRlcyIsIl9yZW1vdmVQYXJlbnQiLCJFTVBUWSIsImlzU3Vic2NyaXB0aW9uIiwiY29uZmlnIiwib25VbmhhbmRsZWRFcnJvciIsIm9uU3RvcHBlZE5vdGlmaWNhdGlvbiIsIlByb21pc2UiLCJ1bmRlZmluZWQiLCJ1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nIiwidXNlRGVwcmVjYXRlZE5leHRDb250ZXh0IiwidGltZW91dFByb3ZpZGVyIiwic2V0VGltZW91dCIsImhhbmRsZXIiLCJ0aW1lb3V0IiwiYXJncyIsIl9pIiwiZGVsZWdhdGUiLCJhcHBseSIsImNsZWFyVGltZW91dCIsImhhbmRsZSIsInJlcG9ydFVuaGFuZGxlZEVycm9yIiwibm9vcCIsIkNPTVBMRVRFX05PVElGSUNBVElPTiIsImNyZWF0ZU5vdGlmaWNhdGlvbiIsImtpbmQiLCJjb250ZXh0IiwiU3Vic2NyaWJlciIsIl9zdXBlciIsImRlc3RpbmF0aW9uIiwiX3RoaXMiLCJpc1N0b3BwZWQiLCJFTVBUWV9PQlNFUlZFUiIsImNvbXBsZXRlIiwiU2FmZVN1YnNjcmliZXIiLCJoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uIiwibmV4dE5vdGlmaWNhdGlvbiIsIl9uZXh0IiwiX2Vycm9yIiwiX2NvbXBsZXRlIiwiX2JpbmQiLCJGdW5jdGlvbiIsImJpbmQiLCJmbiIsIkNvbnN1bWVyT2JzZXJ2ZXIiLCJwYXJ0aWFsT2JzZXJ2ZXIiLCJoYW5kbGVVbmhhbmRsZWRFcnJvciIsIm9ic2VydmVyT3JOZXh0IiwiY29udGV4dF8xIiwiZXJyb3JUaHJvd24iLCJub3RpZmljYXRpb24iLCJzdWJzY3JpYmVyIiwib2JzZXJ2YWJsZSIsImlkZW50aXR5IiwiT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIl9zdWJzY3JpYmUiLCJsaWZ0Iiwib3BlcmF0b3IiLCJzb3VyY2UiLCJpc09ic2VydmVyIiwiY2IiLCJpc1Jvb3QiLCJlcnJvckNvbnRleHQiLCJfdHJ5U3Vic2NyaWJlIiwic2luayIsImZvckVhY2giLCJwcm9taXNlQ3RvciIsImdldFByb21pc2VDdG9yIiwicmVzb2x2ZSIsInJlamVjdCIsInBpcGUiLCJvcGVyYXRpb25zIiwiZm5zIiwiaW5wdXQiLCJyZWR1Y2UiLCJwcmV2IiwidG9Qcm9taXNlIiwiaXNJbnRlcm9wT2JzZXJ2YWJsZSIsImlzQXN5bmNJdGVyYWJsZSIsIm9iaiIsImFzeW5jSXRlcmF0b3IiLCJjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciIsImlzSXRlcmFibGUiLCJyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIiwicmVhZGFibGVTdHJlYW0iLCJfYXJndW1lbnRzIiwiZ2VuZXJhdG9yIiwicSIsImEiLCJyZXN1bWUiLCJmdWxmaWxsIiwic2V0dGxlIiwic2hpZnQiLCJfX2FzeW5jR2VuZXJhdG9yIiwicmVhZGVyIiwiZ2V0UmVhZGVyIiwicmVhZCIsInJlbGVhc2VMb2NrIiwiaXNSZWFkYWJsZVN0cmVhbUxpa2UiLCJpbm5lckZyb20iLCJvYnMiLCJhcnJheSIsInByb21pc2UiLCJmcm9tQXN5bmNJdGVyYWJsZSIsIml0ZXJhYmxlIiwiaXRlcmFibGVfMSIsIml0ZXJhYmxlXzFfMSIsImFzeW5jSXRlcmFibGUiLCJhc3luY0l0ZXJhYmxlXzEiLCJhc3luY0l0ZXJhYmxlXzFfMSIsIlAiLCJfX2FzeW5jVmFsdWVzIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJwcm9jZXNzIiwiY2F0Y2giLCJvcGVyYXRlIiwiaW5pdCIsImhhc0xpZnQiLCJsaWZ0ZWRTb3VyY2UiLCJjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIiLCJvbk5leHQiLCJvbkNvbXBsZXRlIiwib25FcnJvciIsIm9uRmluYWxpemUiLCJPcGVyYXRvclN1YnNjcmliZXIiLCJzaG91bGRVbnN1YnNjcmliZSIsImNsb3NlZF8xIiwicHJvamVjdCIsIm1lcmdlTWFwIiwicmVzdWx0U2VsZWN0b3IiLCJjb25jdXJyZW50IiwiSW5maW5pdHkiLCJpaSIsIm9uQmVmb3JlTmV4dCIsImV4cGFuZCIsImlubmVyU3ViU2NoZWR1bGVyIiwiYWRkaXRpb25hbEZpbmFsaXplciIsImJ1ZmZlciIsImFjdGl2ZSIsImlzQ29tcGxldGUiLCJjaGVja0NvbXBsZXRlIiwib3V0ZXJOZXh0IiwiZG9Jbm5lclN1YiIsImlubmVyQ29tcGxldGUiLCJpbm5lclZhbHVlIiwiYnVmZmVyZWRWYWx1ZSIsIm1lcmdlSW50ZXJuYWxzIiwibm9kZUV2ZW50RW1pdHRlck1ldGhvZHMiLCJldmVudFRhcmdldE1ldGhvZHMiLCJqcXVlcnlNZXRob2RzIiwiZnJvbUV2ZW50IiwidGFyZ2V0IiwiZXZlbnROYW1lIiwib3B0aW9ucyIsImNhbGxPckFwcGx5IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc0V2ZW50VGFyZ2V0IiwibWV0aG9kTmFtZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJpc05vZGVTdHlsZUV2ZW50RW1pdHRlciIsInRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5Iiwib24iLCJvZmYiLCJpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyIiwic3ViVGFyZ2V0IiwiQWN0aW9uIiwic2NoZWR1bGVyIiwid29yayIsInNjaGVkdWxlIiwic3RhdGUiLCJkZWxheSIsImludGVydmFsUHJvdmlkZXIiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJBc3luY0FjdGlvbiIsInBlbmRpbmciLCJpZCIsInJlY3ljbGVBc3luY0lkIiwicmVxdWVzdEFzeW5jSWQiLCJfaWQiLCJmbHVzaCIsIl9zY2hlZHVsZXIiLCJleGVjdXRlIiwiX2V4ZWN1dGUiLCJfZGVsYXkiLCJlcnJvclZhbHVlIiwiZXJyb3JlZCIsImFjdGlvbnMiLCJkYXRlVGltZXN0YW1wUHJvdmlkZXIiLCJub3ciLCJEYXRlIiwiU2NoZWR1bGVyIiwic2NoZWR1bGVyQWN0aW9uQ3RvciIsImFzeW5jU2NoZWR1bGVyIiwiQXN5bmNTY2hlZHVsZXIiLCJTY2hlZHVsZXJBY3Rpb24iLCJfYWN0aXZlIiwiYWN0aW9uIiwiZW52aXJvbWVudHMiLCJEQl9VUkwiLCJBUElfS0VZIiwiZ2V0Q29tcG9uZW50cyIsImNvbXBvbmVudE5hbWUiLCJzZWFyY2hOYW1lIiwidG9Mb3dlckNhc2UiLCJmZXRjaCIsInJlc3BvbnNlIiwib2siLCJqc29uIiwiZGF0YSIsImZpbHRlciIsImNvbXBvbmVudCIsImNvbnNvbGUiLCJsb2ciLCJjcmVhdGVTaG9wU2VjdGlvbiIsIndvcmtzcGFjZUNvbnRhaW5lciIsInNob3BDb250YWluZXIiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhcHBlbmRDaGlsZCIsInNob3BUaXRsZUNvbnRhaW5lciIsInNob3BUaXRsZSIsImlubmVySFRNTCIsInNlYXJjaENvbnRhaW5lciIsInByZWRpY2F0ZSIsInNlYXJjaEJhciIsInBsYWNlaG9sZGVyIiwiYWN0aXZlVGFzayIsImxhc3RWYWx1ZSIsImxhc3RUaW1lIiwiZW1pdCIsImVtaXRXaGVuSWRsZSIsInRhcmdldFRpbWUiLCJldiIsInR4dCIsImlubmVyU3Vic2NyaWJlciIsImNvbXBvbmVudHMiLCJjcmVhdGVTZWFyY2giLCJzaG9wVGFibGUiLCJzaG9wVGFibGVIZWFkIiwic2hvcFRhYmxlSGVhZFJvdyIsInRhYmxlSXRlbSIsInRhYmxlUHJpY2UiLCJ0YWJsZU1hbnVmYWN0dXJlciIsInNob3BUYWJsZUJvZHkiLCJyb3ciLCJ0ZXh0Q29udGVudCIsInByaWNlUlNEIiwidG9QcmVjaXNpb24iLCJtYW51ZmFjdHVyZXIiLCJmaWxsVGFibGUiLCJjcmVhdGVUYWJsZSIsImFwcENvbnRhaW5lciIsImhlYWRlckNvbnRhaW5lciIsImxvZ29Db250YWluZXIiLCJhcHBMb2dvIiwiYXBwVGl0bGVDb250YWluZXIiLCJhcHBUaXRsZSIsImNyZWF0ZUhlYWRlclNlY3Rpb24iLCJ3YWxsZXQiLCJ3YWxsZXRDb250YWluZXIiLCJ3YWxsZXRUaXRsZUNvbnRhaW5lciIsIndhbGxldFRpdGxlIiwiYmFsYW5jZUNvbnRhaW5lciIsImJhbGFuY2VMYWJlbCIsImJhbGFuY2UiLCJjcmVhdGVCYWxhbmNlIiwiZGVwb3NpdENvbnRhaW5lciIsImRlcG9zaXRJbnB1dCIsImRlcG9zaXRCdXR0b24iLCJjcmVhdGVEZXBvc2l0IiwiY29udmVydENvbnRhaW5lciIsImNvbnZlcnRUaXRsZSIsInRvRXVyb0NvbnRhaW5lciIsInRvRXVyb0Ftb3VudCIsInRvRXVyb0J1dHRvbiIsInRvRG9sbGFyQ29udGFpbmVyIiwidG9Eb2xsYXJBbW91bnQiLCJ0b0RvbGxhckJ1dHRvbiIsImNyZWF0ZUNvbnZlcnQiLCJyYXRlc0NvbnRhaW5lciIsImJhbGFuY2VFdXIiLCJpbm5lclRleHQiLCJiYWxhbmNlVXNkIiwiY3JlYXRlUmF0ZXMiLCJjb252ZXJzaW9uSW5mb0NvbnRhaW5lciIsImNvbnZlcnNpb25JbmZvTGluayIsImhyZWYiLCJjcmVhdGVXYWxsZXRTZWN0aW9uIiwic2hvcCIsInJlbmRlciJdLCJzb3VyY2VSb290IjoiIn0=